/*! For license information please see vendors.js.LICENSE.txt */
(self.webpackChunktantum_pm=self.webpackChunktantum_pm||[]).push([[216],{1553:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var o=t&&t.prototype instanceof y?t:y,a=Object.create(o.prototype),i=new P(r||[]);return a._invoke=function(e,t,n){var r=f;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw a;return L()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=C(i,n);if(l){if(l===m)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=c(e,t,n);if("normal"===u.type){if(r=n.done?h:d,u.arg===m)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=h,n.method="throw",n.arg=u.arg)}}}(e,n,i),a}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",m={};function y(){}function v(){}function g(){}var b={};u(b,a,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(O([])));k&&k!==n&&r.call(k,a)&&(b=k);var E=g.prototype=y.prototype=Object.create(b);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(o,a,i,l){var u=c(e[o],e,a);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==typeof f&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(f).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function C(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,C(e,n),"throw"===n.method))return m;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var o=c(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,m;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function O(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:L}}function L(){return{value:t,done:!0}}return v.prototype=g,u(E,"constructor",g),u(g,"constructor",v),v.displayName=u(g,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,u(e,l,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},S(x.prototype),u(x.prototype,i,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new x(s(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(E),u(E,l,"Generator"),u(E,a,(function(){return this})),u(E,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=O,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(_),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return l.type="throw",l.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),_(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;_(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:O(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},7757:(e,t,n)=>{e.exports=n(1553)},9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),o=n(6026),a=n(4372),i=n(5327),l=n(4097),u=n(4109),s=n(7985),c=n(5061),f=n(5655),d=n(5263);e.exports=function(e){return new Promise((function(t,n){var p,h=e.data,m=e.headers,y=e.responseType;function v(){e.cancelToken&&e.cancelToken.unsubscribe(p),e.signal&&e.signal.removeEventListener("abort",p)}r.isFormData(h)&&delete m["Content-Type"];var g=new XMLHttpRequest;if(e.auth){var b=e.auth.username||"",w=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";m.Authorization="Basic "+btoa(b+":"+w)}var k=l(e.baseURL,e.url);function E(){if(g){var r="getAllResponseHeaders"in g?u(g.getAllResponseHeaders()):null,a={data:y&&"text"!==y&&"json"!==y?g.response:g.responseText,status:g.status,statusText:g.statusText,headers:r,config:e,request:g};o((function(e){t(e),v()}),(function(e){n(e),v()}),a),g=null}}if(g.open(e.method.toUpperCase(),i(k,e.params,e.paramsSerializer),!0),g.timeout=e.timeout,"onloadend"in g?g.onloadend=E:g.onreadystatechange=function(){g&&4===g.readyState&&(0!==g.status||g.responseURL&&0===g.responseURL.indexOf("file:"))&&setTimeout(E)},g.onabort=function(){g&&(n(c("Request aborted",e,"ECONNABORTED",g)),g=null)},g.onerror=function(){n(c("Network Error",e,null,g)),g=null},g.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||f.transitional;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,r.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",g)),g=null},r.isStandardBrowserEnv()){var S=(e.withCredentials||s(k))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;S&&(m[e.xsrfHeaderName]=S)}"setRequestHeader"in g&&r.forEach(m,(function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete m[t]:g.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(g.withCredentials=!!e.withCredentials),y&&"json"!==y&&(g.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&g.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&g.upload&&g.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(p=function(e){g&&(n(!e||e&&e.type?new d("canceled"):e),g.abort(),g=null)},e.cancelToken&&e.cancelToken.subscribe(p),e.signal&&(e.signal.aborted?p():e.signal.addEventListener("abort",p))),h||(h=null),g.send(h)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),o=n(1849),a=n(321),i=n(7185),l=function e(t){var n=new a(t),l=o(a.prototype.request,n);return r.extend(l,a.prototype,n),r.extend(l,n),l.create=function(n){return e(i(t,n))},l}(n(5655));l.Axios=a,l.Cancel=n(5263),l.CancelToken=n(4972),l.isCancel=n(6502),l.VERSION=n(7288).version,l.all=function(e){return Promise.all(e)},l.spread=n(8713),l.isAxiosError=n(6268),e.exports=l,e.exports.default=l},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,n)=>{"use strict";var r=n(5263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),o=n(5327),a=n(782),i=n(3572),l=n(7185),u=n(4875),s=u.validators;function c(e){this.defaults=e,this.interceptors={request:new a,response:new a}}c.prototype.request=function(e,t){if("string"==typeof e?(t=t||{}).url=e:t=e||{},!t.url)throw new Error("Provided config url is not valid");(t=l(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&u.assertOptions(n,{silentJSONParsing:s.transitional(s.boolean),forcedJSONParsing:s.transitional(s.boolean),clarifyTimeoutError:s.transitional(s.boolean)},!1);var r=[],o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var a,c=[];if(this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)})),!o){var f=[i,void 0];for(Array.prototype.unshift.apply(f,r),f=f.concat(c),a=Promise.resolve(t);f.length;)a=a.then(f.shift(),f.shift());return a}for(var d=t;r.length;){var p=r.shift(),h=r.shift();try{d=p(d)}catch(e){h(e);break}}try{a=i(d)}catch(e){return Promise.reject(e)}for(;c.length;)a=a.then(c.shift(),c.shift());return a},c.prototype.getUri=function(e){if(!e.url)throw new Error("Provided config url is not valid");return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(l(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,r){return this.request(l(r||{},{method:e,url:t,data:n}))}})),e.exports=c},782:(e,t,n)=>{"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,n)=>{"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},5061:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},3572:(e,t,n)=>{"use strict";var r=n(4867),o=n(8527),a=n(6502),i=n(5655),l=n(5263);function u(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new l("canceled")}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return u(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(u(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={};function o(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function a(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(e[n],t[n])}function i(e){if(!r.isUndefined(t[e]))return o(void 0,t[e])}function l(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(void 0,t[n])}function u(n){return n in t?o(e[n],t[n]):n in e?o(void 0,e[n]):void 0}var s={url:i,method:i,data:i,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:u};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=s[e]||a,o=t(e);r.isUndefined(o)&&t!==u||(n[e]=o)})),n}},6026:(e,t,n)=>{"use strict";var r=n(5061);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867),o=n(5655);e.exports=function(e,t,n){var a=this||o;return r.forEach(n,(function(n){e=n.call(a,e,t)})),e}},5655:(e,t,n)=>{"use strict";var r=n(4867),o=n(6016),a=n(481),i={"Content-Type":"application/x-www-form-urlencoded"};function l(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,s={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(u=n(5448)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(l(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)||t&&"application/json"===t["Content-Type"]?(l(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||s.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,i=!n&&"json"===this.responseType;if(i||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw a(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){s.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){s.headers[e]=r.merge(i)})),e.exports=s},7288:e=>{e.exports={version:"0.25.0"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(a)&&l.push("domain="+a),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},4109:(e,t,n)=>{"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4875:(e,t,n)=>{"use strict";var r=n(7288).version,o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var a={};o.transitional=function(e,t,n){function o(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,i){if(!1===e)throw new Error(o(r," has been removed"+(t?" in "+t:"")));return t&&!a[r]&&(a[r]=!0,console.warn(o(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,i)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),o=r.length;o-- >0;){var a=r[o],i=t[a];if(i){var l=e[a],u=void 0===l||i(l,a,e);if(!0!==u)throw new TypeError("option "+a+" must be "+u)}else if(!0!==n)throw Error("Unknown option "+a)}},validators:o}},4867:(e,t,n)=>{"use strict";var r=n(1849),o=Object.prototype.toString;function a(e){return Array.isArray(e)}function i(e){return void 0===e}function l(e){return"[object ArrayBuffer]"===o.call(e)}function u(e){return null!==e&&"object"==typeof e}function s(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===o.call(e)}function f(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:l,isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"[object FormData]"===o.call(e)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&l(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isPlainObject:s,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:c,isStream:function(e){return u(e)&&c(e.pipe)},isURLSearchParams:function(e){return"[object URLSearchParams]"===o.call(e)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:f,merge:function e(){var t={};function n(n,r){s(t[r])&&s(n)?t[r]=e(t[r],n):s(n)?t[r]=e({},n):a(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)f(arguments[r],n);return t},extend:function(e,t,n){return f(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},71:(e,t,n)=>{"use strict";n.d(t,{lX:()=>E,q_:()=>P,ob:()=>h,PP:()=>L,Ep:()=>p,Hp:()=>m});var r=n(7462);function o(e){return"/"===e.charAt(0)}function a(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}function i(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}const l=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=i(t),o=i(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};var u=n(2177);function s(e){return"/"===e.charAt(0)?e:"/"+e}function c(e){return"/"===e.charAt(0)?e.substr(1):e}function f(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function d(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function p(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function h(e,t,n,i){var l;"string"==typeof e?(l=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e),l.state=t):(void 0===(l=(0,r.Z)({},e)).pathname&&(l.pathname=""),l.search?"?"!==l.search.charAt(0)&&(l.search="?"+l.search):l.search="",l.hash?"#"!==l.hash.charAt(0)&&(l.hash="#"+l.hash):l.hash="",void 0!==t&&void 0===l.state&&(l.state=t));try{l.pathname=decodeURI(l.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+l.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(l.key=n),i?l.pathname?"/"!==l.pathname.charAt(0)&&(l.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],i=t&&t.split("/")||[],l=e&&o(e),u=t&&o(t),s=l||u;if(e&&o(e)?i=r:r.length&&(i.pop(),i=i.concat(r)),!i.length)return"/";if(i.length){var c=i[i.length-1];n="."===c||".."===c||""===c}else n=!1;for(var f=0,d=i.length;d>=0;d--){var p=i[d];"."===p?a(i,d):".."===p?(a(i,d),f++):f&&(a(i,d),f--)}if(!s)for(;f--;f)i.unshift("..");!s||""===i[0]||i[0]&&o(i[0])||i.unshift("");var h=i.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h}(l.pathname,i.pathname)):l.pathname=i.pathname:l.pathname||(l.pathname="/"),l}function m(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&l(e.state,t.state)}function y(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var v=!("undefined"==typeof window||!window.document||!window.document.createElement);function g(e,t){t(window.confirm(e))}var b="popstate",w="hashchange";function k(){try{return window.history.state||{}}catch(e){return{}}}function E(e){void 0===e&&(e={}),v||(0,u.Z)(!1);var t,n=window.history,o=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,a=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,l=i.forceRefresh,c=void 0!==l&&l,m=i.getUserConfirmation,E=void 0===m?g:m,S=i.keyLength,x=void 0===S?6:S,C=e.basename?d(s(e.basename)):"";function T(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return C&&(a=f(a,C)),h(a,r,n)}function _(){return Math.random().toString(36).substr(2,x)}var P=y();function O(e){(0,r.Z)(B,e),B.length=n.length,P.notifyListeners(B.location,B.action)}function L(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||R(T(e.state))}function N(){R(T(k()))}var A=!1;function R(e){A?(A=!1,O()):P.confirmTransitionTo(e,"POP",E,(function(t){t?O({action:"POP",location:e}):function(e){var t=B.location,n=M.indexOf(t.key);-1===n&&(n=0);var r=M.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(A=!0,I(o))}(e)}))}var j=T(k()),M=[j.key];function z(e){return C+p(e)}function I(e){n.go(e)}var U=0;function D(e){1===(U+=e)&&1===e?(window.addEventListener(b,L),a&&window.addEventListener(w,N)):0===U&&(window.removeEventListener(b,L),a&&window.removeEventListener(w,N))}var F=!1,B={length:n.length,action:"POP",location:j,createHref:z,push:function(e,t){var r="PUSH",a=h(e,t,_(),B.location);P.confirmTransitionTo(a,r,E,(function(e){if(e){var t=z(a),i=a.key,l=a.state;if(o)if(n.pushState({key:i,state:l},null,t),c)window.location.href=t;else{var u=M.indexOf(B.location.key),s=M.slice(0,u+1);s.push(a.key),M=s,O({action:r,location:a})}else window.location.href=t}}))},replace:function(e,t){var r="REPLACE",a=h(e,t,_(),B.location);P.confirmTransitionTo(a,r,E,(function(e){if(e){var t=z(a),i=a.key,l=a.state;if(o)if(n.replaceState({key:i,state:l},null,t),c)window.location.replace(t);else{var u=M.indexOf(B.location.key);-1!==u&&(M[u]=a.key),O({action:r,location:a})}else window.location.replace(t)}}))},go:I,goBack:function(){I(-1)},goForward:function(){I(1)},block:function(e){void 0===e&&(e=!1);var t=P.setPrompt(e);return F||(D(1),F=!0),function(){return F&&(F=!1,D(-1)),t()}},listen:function(e){var t=P.appendListener(e);return D(1),function(){D(-1),t()}}};return B}var S="hashchange",x={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+c(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:c,decodePath:s},slash:{encodePath:s,decodePath:s}};function C(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function T(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function _(e){window.location.replace(C(window.location.href)+"#"+e)}function P(e){void 0===e&&(e={}),v||(0,u.Z)(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),o=n.getUserConfirmation,a=void 0===o?g:o,i=n.hashType,l=void 0===i?"slash":i,c=e.basename?d(s(e.basename)):"",m=x[l],b=m.encodePath,w=m.decodePath;function k(){var e=w(T());return c&&(e=f(e,c)),h(e)}var E=y();function P(e){(0,r.Z)(F,e),F.length=t.length,E.notifyListeners(F.location,F.action)}var O=!1,L=null;function N(){var e,t,n=T(),r=b(n);if(n!==r)_(r);else{var o=k(),i=F.location;if(!O&&(t=o,(e=i).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(L===p(o))return;L=null,function(e){if(O)O=!1,P();else{E.confirmTransitionTo(e,"POP",a,(function(t){t?P({action:"POP",location:e}):function(e){var t=F.location,n=M.lastIndexOf(p(t));-1===n&&(n=0);var r=M.lastIndexOf(p(e));-1===r&&(r=0);var o=n-r;o&&(O=!0,z(o))}(e)}))}}(o)}}var A=T(),R=b(A);A!==R&&_(R);var j=k(),M=[p(j)];function z(e){t.go(e)}var I=0;function U(e){1===(I+=e)&&1===e?window.addEventListener(S,N):0===I&&window.removeEventListener(S,N)}var D=!1,F={length:t.length,action:"POP",location:j,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=C(window.location.href)),n+"#"+b(c+p(e))},push:function(e,t){var n="PUSH",r=h(e,void 0,void 0,F.location);E.confirmTransitionTo(r,n,a,(function(e){if(e){var t=p(r),o=b(c+t);if(T()!==o){L=t,function(e){window.location.hash=e}(o);var a=M.lastIndexOf(p(F.location)),i=M.slice(0,a+1);i.push(t),M=i,P({action:n,location:r})}else P()}}))},replace:function(e,t){var n="REPLACE",r=h(e,void 0,void 0,F.location);E.confirmTransitionTo(r,n,a,(function(e){if(e){var t=p(r),o=b(c+t);T()!==o&&(L=t,_(o));var a=M.indexOf(p(F.location));-1!==a&&(M[a]=t),P({action:n,location:r})}}))},go:z,goBack:function(){z(-1)},goForward:function(){z(1)},block:function(e){void 0===e&&(e=!1);var t=E.setPrompt(e);return D||(U(1),D=!0),function(){return D&&(D=!1,U(-1)),t()}},listen:function(e){var t=E.appendListener(e);return U(1),function(){U(-1),t()}}};return F}function O(e,t,n){return Math.min(Math.max(e,t),n)}function L(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,o=t.initialEntries,a=void 0===o?["/"]:o,i=t.initialIndex,l=void 0===i?0:i,u=t.keyLength,s=void 0===u?6:u,c=y();function f(e){(0,r.Z)(w,e),w.length=w.entries.length,c.notifyListeners(w.location,w.action)}function d(){return Math.random().toString(36).substr(2,s)}var m=O(l,0,a.length-1),v=a.map((function(e){return h(e,void 0,"string"==typeof e?d():e.key||d())})),g=p;function b(e){var t=O(w.index+e,0,w.entries.length-1),r=w.entries[t];c.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:v.length,action:"POP",location:v[m],index:m,entries:v,createHref:g,push:function(e,t){var r="PUSH",o=h(e,t,d(),w.location);c.confirmTransitionTo(o,r,n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),f({action:r,location:o,index:t,entries:n})}}))},replace:function(e,t){var r="REPLACE",o=h(e,t,d(),w.location);c.confirmTransitionTo(o,r,n,(function(e){e&&(w.entries[w.index]=o,f({action:r,location:o}))}))},go:b,goBack:function(){b(-1)},goForward:function(){b(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&(e=!1),c.setPrompt(e)},listen:function(e){return c.appendListener(e)}};return w}},8679:(e,t,n)=>{"use strict";var r=n(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),m=u(n),y=0;y<i.length;++y){var v=i[y];if(!(a[v]||r&&r[v]||m&&m[v]||l&&l[v])){var g=d(n,v);try{s(t,v,g)}catch(e){}}}}return t}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,u=o(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))n.call(i,c)&&(u[c]=i[c]);if(t){l=t(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(u[l[f]]=i[l[f]])}}return u}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),a=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function y(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new y(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new y(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new y(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new y(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new y(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new y(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new y(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new y(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new y(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);v[t]=new y(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);v[t]=new y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);v[t]=new y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,S=60106,x=60107,C=60108,T=60114,_=60109,P=60110,O=60112,L=60113,N=60120,A=60115,R=60116,j=60121,M=60128,z=60129,I=60130,U=60131;if("function"==typeof Symbol&&Symbol.for){var D=Symbol.for;E=D("react.element"),S=D("react.portal"),x=D("react.fragment"),C=D("react.strict_mode"),T=D("react.profiler"),_=D("react.provider"),P=D("react.context"),O=D("react.forward_ref"),L=D("react.suspense"),N=D("react.suspense_list"),A=D("react.memo"),R=D("react.lazy"),j=D("react.block"),D("react.scope"),M=D("react.opaque.id"),z=D("react.debug_trace_mode"),I=D("react.offscreen"),U=D("react.legacy_hidden")}var F,B="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function V(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var H=!1;function W(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function q(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return W(e.type,!1);case 11:return W(e.type.render,!1);case 22:return W(e.type._render,!1);case 1:return W(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case S:return"Portal";case T:return"Profiler";case C:return"StrictMode";case L:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case _:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case A:return Q(e.type);case j:return Q(e._render);case R:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function Z(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function K(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=K(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=K(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Z(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Z(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Z(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Z(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Z(n)}}function se(e,t){var n=Z(t.value),r=Z(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ye=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function ke(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ge).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function xe(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Te=null,_e=null,Pe=null;function Oe(e){if(e=no(e)){if("function"!=typeof Te)throw Error(i(280));var t=e.stateNode;t&&(t=oo(t),Te(e.stateNode,e.type,t))}}function Le(e){_e?Pe?Pe.push(e):Pe=[e]:_e=e}function Ne(){if(_e){var e=_e,t=Pe;if(Pe=_e=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Ae(e,t){return e(t)}function Re(e,t,n,r,o){return e(t,n,r,o)}function je(){}var Me=Ae,ze=!1,Ie=!1;function Ue(){null===_e&&null===Pe||(je(),Ne())}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Fe=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(me){Fe=!1}function $e(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ve=!1,He=null,We=!1,qe=null,Qe={onError:function(e){Ve=!0,He=e}};function Ze(e,t,n,r,o,a,i,l,u){Ve=!1,He=null,$e.apply(Qe,arguments)}function Ke(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ke(e)!==e)throw Error(i(188))}function Ge(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Xe(o),e;if(a===r)return Xe(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,lt=null,ut=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function yt(e){var t=to(e.target);if(null!==t){var n=Ke(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){vt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&vt(it)&&(it=null),null!==lt&&vt(lt)&&(lt=null),null!==ut&&vt(ut)&&(ut=null),st.forEach(gt),ct.forEach(gt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function kt(e){function t(t){return wt(t,e)}if(0<at.length){wt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==lt&&wt(lt,e),null!==ut&&wt(ut,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)yt(n),null===n.blockedOn&&ft.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var St={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},xt={},Ct={};function Tt(e){if(xt[e])return xt[e];if(!St[e])return e;var t,n=St[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return xt[e]=n[t];return e}f&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var _t=Tt("animationend"),Pt=Tt("animationiteration"),Ot=Tt("animationstart"),Lt=Tt("transitionend"),Nt=new Map,At=new Map,Rt=["abort","abort",_t,"animationEnd",Pt,"animationIteration",Ot,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Lt,"transitionEnd","waiting","waiting"];function jt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),At.set(r,t),Nt.set(r,o),s(o,[r])}}(0,a.unstable_now)();var Mt=8;function zt(e){if(0!=(1&e))return Mt=15,1;if(0!=(2&e))return Mt=14,2;if(0!=(4&e))return Mt=13,4;var t=24&e;return 0!==t?(Mt=12,t):0!=(32&e)?(Mt=11,32):0!=(t=192&e)?(Mt=10,t):0!=(256&e)?(Mt=9,256):0!=(t=3584&e)?(Mt=8,t):0!=(4096&e)?(Mt=7,4096):0!=(t=4186112&e)?(Mt=6,t):0!=(t=62914560&e)?(Mt=5,t):67108864&e?(Mt=4,67108864):0!=(134217728&e)?(Mt=3,134217728):0!=(t=805306368&e)?(Mt=2,t):0!=(1073741824&e)?(Mt=1,1073741824):(Mt=8,e)}function It(e,t){var n=e.pendingLanes;if(0===n)return Mt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=Mt=15;else if(0!=(a=134217727&n)){var u=a&~i;0!==u?(r=zt(u),o=Mt):0!=(l&=a)&&(r=zt(l),o=Mt)}else 0!=(a=n&~i)?(r=zt(a),o=Mt):0!==l&&(r=zt(l),o=Mt);if(0===r)return 0;if(r=n&((0>(r=31-Vt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(zt(t),o<=Mt)return t;Mt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Vt(t)),r|=e[n],t&=~o;return r}function Ut(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Dt(10,t):e;case 10:return 0===(e=Ft(192&~t))?Dt(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&0===(e=Ft(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ft(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function $t(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Vt(t)]=n}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ht(e)/Wt|0)|0},Ht=Math.log,Wt=Math.LN2,qt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Zt=!0;function Kt(e,t,n,r){ze||je();var o=Xt,a=ze;ze=!0;try{Re(o,e,t,n,r)}finally{(ze=a)||Ue()}}function Yt(e,t,n,r){Qt(qt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var o;if(Zt)if((o=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Gt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=mt(it,e,t,n,r,o),!0;case"dragenter":return lt=mt(lt,e,t,n,r,o),!0;case"mouseover":return ut=mt(ut,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,mt(st.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}jr(e,t,r,null,n)}}}function Gt(e,t,n,r){var o=Ce(r);if(null!==(o=to(o))){var a=Ke(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ye(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return jr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=o({},fn,{view:0,detail:0}),hn=ln(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),yn=ln(mn),vn=ln(o({},mn,{dataTransfer:0})),gn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),kn=ln(wn),En=ln(o({},fn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Tn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function _n(){return Tn}var Pn=o({},pn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),On=ln(Pn),Ln=ln(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nn=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),An=ln(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),jn=ln(Rn),Mn=[9,13,27,32],zn=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var Un=f&&"TextEvent"in window&&!In,Dn=f&&(!zn||In&&8<In&&11>=In),Fn=String.fromCharCode(32),Bn=!1;function $n(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Hn=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Qn(e,t,n,r){Le(r),0<(t=zr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Zn=null,Kn=null;function Yn(e){Pr(e,0)}function Xn(e){if(X(ro(e)))return e}function Gn(e,t){if("change"===e)return t}var Jn=!1;if(f){var er;if(f){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Zn&&(Zn.detachEvent("onpropertychange",or),Kn=Zn=null)}function or(e){if("value"===e.propertyName&&Xn(Kn)){var t=[];if(Qn(t,Kn,e,Ce(e)),e=Yn,ze)e(t);else{ze=!0;try{Ae(e,t)}finally{ze=!1,Ue()}}}}function ar(e,t,n){"focusin"===e?(rr(),Kn=n,(Zn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Xn(Kn)}function lr(e,t){if("click"===e)return Xn(t)}function ur(e,t){if("input"===e||"change"===e)return Xn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function fr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!sr(e[n[r]],t[n[r]]))return!1;return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,t){var n,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function yr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vr=f&&"documentMode"in document&&11>=document.documentMode,gr=null,br=null,wr=null,kr=!1;function Er(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;kr||null==gr||gr!==G(r)||(r="selectionStart"in(r=gr)&&yr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},wr&&fr(wr,r)||(wr=r,0<(r=zr(br,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}jt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),jt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),jt(Rt,2);for(var Sr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),xr=0;xr<Sr.length;xr++)At.set(Sr[xr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Cr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Tr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Cr));function _r(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,s){if(Ze.apply(this,arguments),Ve){if(!Ve)throw Error(i(198));var c=He;Ve=!1,He=null,We||(We=!0,qe=c)}}(r,t,void 0,e),e.currentTarget=null}function Pr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;_r(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;_r(o,l,s),a=u}}}if(We)throw e=qe,We=!1,qe=null,e}function Or(e,t){var n=ao(t),r=e+"__bubble";n.has(r)||(Rr(t,e,2,!1),n.add(r))}var Lr="_reactListening"+Math.random().toString(36).slice(2);function Nr(e){e[Lr]||(e[Lr]=!0,l.forEach((function(t){Tr.has(t)||Ar(t,!1,e,null),Ar(t,!0,e,null)})))}function Ar(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Tr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=ao(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Rr(a,e,o,t),i.add(l))}function Rr(e,t,n,r){var o=At.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Yt;break;default:o=Xt}n=o.bind(null,t,n,e),o=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function jr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=to(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(Ie)return e();Ie=!0;try{Me(e,t,n)}finally{Ie=!1,Ue()}}((function(){var r=a,o=Ce(n),i=[];e:{var l=Nt.get(e);if(void 0!==l){var u=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=On;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=yn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Nn;break;case _t:case Pt:case Ot:u=bn;break;case Lt:u=An;break;case"scroll":u=hn;break;case"wheel":u=jn;break;case"copy":case"cut":case"paste":u=kn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Ln}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=De(h,d))&&c.push(Mr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!to(s)&&!s[Jr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?to(s):null)&&(s!==(f=Ke(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=yn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Ln,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:ro(u),p=null==s?l:ro(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,to(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Ir(p))h++;for(p=0,m=d;m;m=Ir(m))p++;for(;0<h-p;)c=Ir(c),h--;for(;0<p-h;)d=Ir(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Ir(c),d=Ir(d)}c=null}else c=null;null!==u&&Ur(i,l,u,c,!1),null!==s&&null!==f&&Ur(i,f,s,c,!0)}if("select"===(u=(l=r?ro(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var y=Gn;else if(qn(l))if(Jn)y=ur;else{y=ir;var v=ar}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(y=lr);switch(y&&(y=y(e,r))?Qn(i,y,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&oe(l,"number",l.value)),v=r?ro(r):window,e){case"focusin":(qn(v)||"true"===v.contentEditable)&&(gr=v,br=r,wr=null);break;case"focusout":wr=br=gr=null;break;case"mousedown":kr=!0;break;case"contextmenu":case"mouseup":case"dragend":kr=!1,Er(i,n,o);break;case"selectionchange":if(vr)break;case"keydown":case"keyup":Er(i,n,o)}var g;if(zn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Hn?$n(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(Hn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Hn&&(g=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Hn=!0)),0<(v=zr(r,b)).length&&(b=new En(b,e,null,n,o),i.push({event:b,listeners:v}),(g||null!==(g=Vn(n)))&&(b.data=g))),(g=Un?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(Bn=!0,Fn);case"textInput":return(e=t.data)===Fn&&Bn?null:e;default:return null}}(e,n):function(e,t){if(Hn)return"compositionend"===e||!zn&&$n(e,t)?(e=nn(),tn=en=Jt=null,Hn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=zr(r,"onBeforeInput")).length&&(o=new En("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Pr(i,t)}))}function Mr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function zr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=De(e,n))&&r.unshift(Mr(e,a,o)),null!=(a=De(e,t))&&r.push(Mr(e,a,o))),e=e.return}return r}function Ir(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ur(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=De(n,a))&&i.unshift(Mr(n,u,l)):o||null!=(u=De(n,a))&&i.push(Mr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Dr(){}var Fr=null,Br=null;function $r(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Vr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Hr="function"==typeof setTimeout?setTimeout:void 0,Wr="function"==typeof clearTimeout?clearTimeout:void 0;function qr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Qr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Zr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Kr=0,Yr=Math.random().toString(36).slice(2),Xr="__reactFiber$"+Yr,Gr="__reactProps$"+Yr,Jr="__reactContainer$"+Yr,eo="__reactEvents$"+Yr;function to(e){var t=e[Xr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Xr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Zr(e);null!==e;){if(n=e[Xr])return n;e=Zr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Xr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function oo(e){return e[Gr]||null}function ao(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var io=[],lo=-1;function uo(e){return{current:e}}function so(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function co(e,t){lo++,io[lo]=e.current,e.current=t}var fo={},po=uo(fo),ho=uo(!1),mo=fo;function yo(e,t){var n=e.type.contextTypes;if(!n)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function vo(e){return null!=e.childContextTypes}function go(){so(ho),so(po)}function bo(e,t,n){if(po.current!==fo)throw Error(i(168));co(po,t),co(ho,n)}function wo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,Q(t)||"Unknown",a));return o({},n,r)}function ko(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||fo,mo=po.current,co(po,e),co(ho,ho.current),!0}function Eo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=wo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,so(ho),so(po),co(po,e)):so(ho),co(ho,n)}var So=null,xo=null,Co=a.unstable_runWithPriority,To=a.unstable_scheduleCallback,_o=a.unstable_cancelCallback,Po=a.unstable_shouldYield,Oo=a.unstable_requestPaint,Lo=a.unstable_now,No=a.unstable_getCurrentPriorityLevel,Ao=a.unstable_ImmediatePriority,Ro=a.unstable_UserBlockingPriority,jo=a.unstable_NormalPriority,Mo=a.unstable_LowPriority,zo=a.unstable_IdlePriority,Io={},Uo=void 0!==Oo?Oo:function(){},Do=null,Fo=null,Bo=!1,$o=Lo(),Vo=1e4>$o?Lo:function(){return Lo()-$o};function Ho(){switch(No()){case Ao:return 99;case Ro:return 98;case jo:return 97;case Mo:return 96;case zo:return 95;default:throw Error(i(332))}}function Wo(e){switch(e){case 99:return Ao;case 98:return Ro;case 97:return jo;case 96:return Mo;case 95:return zo;default:throw Error(i(332))}}function qo(e,t){return e=Wo(e),Co(e,t)}function Qo(e,t,n){return e=Wo(e),To(e,t,n)}function Zo(){if(null!==Fo){var e=Fo;Fo=null,_o(e)}Ko()}function Ko(){if(!Bo&&null!==Do){Bo=!0;var e=0;try{var t=Do;qo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),To(Ao,Zo),t}finally{Bo=!1}}}var Yo=k.ReactCurrentBatchConfig;function Xo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Go=uo(null),Jo=null,ea=null,ta=null;function na(){ta=ea=Jo=null}function ra(e){var t=Go.current;so(Go),e.type._context._currentValue=t}function oa(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function aa(e,t){Jo=e,ta=ea=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(zi=!0),e.firstContext=null)}function ia(e,t){if(ta!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ta=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ea){if(null===Jo)throw Error(i(308));ea=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else ea=ea.next=t;return e._currentValue}var la=!1;function ua(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function sa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ca(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function fa(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function da(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function pa(e,t,n,r){var a=e.updateQueue;la=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?i=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==i){for(d=a.baseState,l=0,f=c=s=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:la=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=f,Ul|=l,e.lanes=l,e.memoizedState=d}}function ha(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var ma=(new r.Component).refs;function ya(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var va={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=su(),o=cu(e),a=ca(r,o);a.payload=t,null!=n&&(a.callback=n),fa(e,a),fu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=su(),o=cu(e),a=ca(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),fa(e,a),fu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=su(),r=cu(e),o=ca(n,r);o.tag=2,null!=t&&(o.callback=t),fa(e,o),fu(e,r,n)}};function ga(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&fr(n,r)&&fr(o,a))}function ba(e,t,n){var r=!1,o=fo,a=t.contextType;return"object"==typeof a&&null!==a?a=ia(a):(o=vo(t)?mo:po.current,a=(r=null!=(r=t.contextTypes))?yo(e,o):fo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=va,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function wa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&va.enqueueReplaceState(t,t.state,null)}function ka(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ma,ua(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ia(a):(a=vo(t)?mo:po.current,o.context=yo(e,a)),pa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ya(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&va.enqueueReplaceState(o,o.state,null),pa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var Ea=Array.isArray;function Sa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===ma&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function xa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ca(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Vu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Qu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Sa(e,t,n),r.return=e,r):((r=Hu(n.type,n.key,n.props,null,e.mode,r)).ref=Sa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Zu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Wu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Qu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Hu(t.type,t.key,t.props,null,e.mode,n)).ref=Sa(e,null,t),n.return=e,n;case S:return(t=Zu(t,e.mode,n)).return=e,t}if(Ea(t)||$(t))return(t=Wu(t,e.mode,n,null)).return=e,t;xa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===o?n.type===x?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case S:return n.key===o?c(e,t,n,r):null}if(Ea(n)||$(n))return null!==o?null:f(e,t,n,r,null);xa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return e=e.get(null===r.key?n:r.key)||null,r.type===x?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Ea(r)||$(r))return f(t,e=e.get(n)||null,r,o,null);xa(t,r)}return null}function m(o,i,l,u){for(var s=null,c=null,f=i,m=i=0,y=null;null!==f&&m<l.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=p(o,f,l[m],u);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v,f=y}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)null!==(y=h(f,o,m,l[m],u))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y);return e&&f.forEach((function(e){return t(o,e)})),s}function y(o,l,u,s){var c=$(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,m=l,y=l=0,v=null,g=u.next();null!==m&&!g.done;y++,g=u.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=p(o,m,g.value,s);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,y),null===f?c=b:f.sibling=b,f=b,m=v}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;y++,g=u.next())null!==(g=d(o,g.value,s))&&(l=a(g,l,y),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;y++,g=u.next())null!==(g=h(m,o,y,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),l=a(g,l,y),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,u){var s="object"==typeof a&&null!==a&&a.type===x&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case E:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){if(7===s.tag){if(a.type===x){n(e,s.sibling),(r=o(s,a.props.children)).return=e,e=r;break e}}else if(s.elementType===a.type){n(e,s.sibling),(r=o(s,a.props)).ref=Sa(e,s,a),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}a.type===x?((r=Wu(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Hu(a.type,a.key,a.props,null,e.mode,u)).ref=Sa(e,r,a),u.return=e,e=u)}return l(e);case S:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Zu(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Qu(a,e.mode,u)).return=e,e=r),l(e);if(Ea(a))return m(e,r,a,u);if($(a))return y(e,r,a,u);if(c&&xa(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Q(e.type)||"Component"))}return n(e,r)}}var Ta=Ca(!0),_a=Ca(!1),Pa={},Oa=uo(Pa),La=uo(Pa),Na=uo(Pa);function Aa(e){if(e===Pa)throw Error(i(174));return e}function Ra(e,t){switch(co(Na,t),co(La,e),co(Oa,Pa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}so(Oa),co(Oa,t)}function ja(){so(Oa),so(La),so(Na)}function Ma(e){Aa(Na.current);var t=Aa(Oa.current),n=pe(t,e.type);t!==n&&(co(La,e),co(Oa,n))}function za(e){La.current===e&&(so(Oa),so(La))}var Ia=uo(0);function Ua(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,Fa=null,Ba=!1;function $a(e,t){var n=Bu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Va(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Ha(e){if(Ba){var t=Fa;if(t){var n=t;if(!Va(e,t)){if(!(t=Qr(n.nextSibling))||!Va(e,t))return e.flags=-1025&e.flags|2,Ba=!1,void(Da=e);$a(Da,n)}Da=e,Fa=Qr(t.firstChild)}else e.flags=-1025&e.flags|2,Ba=!1,Da=e}}function Wa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function qa(e){if(e!==Da)return!1;if(!Ba)return Wa(e),Ba=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Vr(t,e.memoizedProps))for(t=Fa;t;)$a(e,t),t=Qr(t.nextSibling);if(Wa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Fa=Qr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Fa=null}}else Fa=Da?Qr(e.stateNode.nextSibling):null;return!0}function Qa(){Fa=Da=null,Ba=!1}var Za=[];function Ka(){for(var e=0;e<Za.length;e++)Za[e]._workInProgressVersionPrimary=null;Za.length=0}var Ya=k.ReactCurrentDispatcher,Xa=k.ReactCurrentBatchConfig,Ga=0,Ja=null,ei=null,ti=null,ni=!1,ri=!1;function oi(){throw Error(i(321))}function ai(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function ii(e,t,n,r,o,a){if(Ga=a,Ja=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ya.current=null===e||null===e.memoizedState?Ai:Ri,e=n(r,o),ri){a=0;do{if(ri=!1,!(25>a))throw Error(i(301));a+=1,ti=ei=null,t.updateQueue=null,Ya.current=ji,e=n(r,o)}while(ri)}if(Ya.current=Ni,t=null!==ei&&null!==ei.next,Ga=0,ti=ei=Ja=null,ni=!1,t)throw Error(i(300));return e}function li(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ti?Ja.memoizedState=ti=e:ti=ti.next=e,ti}function ui(){if(null===ei){var e=Ja.alternate;e=null!==e?e.memoizedState:null}else e=ei.next;var t=null===ti?Ja.memoizedState:ti.next;if(null!==t)ti=t,ei=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ei=e).memoizedState,baseState:ei.baseState,baseQueue:ei.baseQueue,queue:ei.queue,next:null},null===ti?Ja.memoizedState=ti=e:ti=ti.next=e}return ti}function si(e,t){return"function"==typeof t?t(e):t}function ci(e){var t=ui(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ei,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=a=null,s=o;do{var c=s.lane;if((Ga&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,a=r):u=u.next=f,Ja.lanes|=c,Ul|=c}s=s.next}while(null!==s&&s!==o);null===u?a=r:u.next=l,sr(r,t.memoizedState)||(zi=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function fi(e){var t=ui(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);sr(a,t.memoizedState)||(zi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function di(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ga&e)===e)&&(t._workInProgressVersionPrimary=r,Za.push(t))),e)return n(t._source);throw Za.push(t),Error(i(350))}function pi(e,t,n,r){var o=Ll;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=Ya.current,s=u.useState((function(){return di(o,t,n)})),c=s[1],f=s[0];s=ti;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var y=Ja;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!sr(l,e)){e=n(t._source),sr(f,e)||(c(e),e=cu(y),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var u=31-Vt(i),s=1<<u;r[u]|=e,i&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=cu(y);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),sr(h,n)&&sr(m,t)&&sr(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:si,lastRenderedState:f}).dispatch=c=Li.bind(null,Ja,e),s.queue=e,s.baseQueue=null,f=di(o,t,n),s.memoizedState=s.baseState=f),f}function hi(e,t,n){return pi(ui(),e,t,n)}function mi(e){var t=li();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:si,lastRenderedState:e}).dispatch=Li.bind(null,Ja,e),[t.memoizedState,e]}function yi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ja.updateQueue)?(t={lastEffect:null},Ja.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function vi(e){return e={current:e},li().memoizedState=e}function gi(){return ui().memoizedState}function bi(e,t,n,r){var o=li();Ja.flags|=e,o.memoizedState=yi(1|t,n,void 0,void 0===r?null:r)}function wi(e,t,n,r){var o=ui();r=void 0===r?null:r;var a=void 0;if(null!==ei){var i=ei.memoizedState;if(a=i.destroy,null!==r&&ai(r,i.deps))return void yi(t,n,a,r)}Ja.flags|=e,o.memoizedState=yi(1|t,n,a,r)}function ki(e,t){return bi(516,4,e,t)}function Ei(e,t){return wi(516,4,e,t)}function Si(e,t){return wi(4,2,e,t)}function xi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ci(e,t,n){return n=null!=n?n.concat([e]):null,wi(4,2,xi.bind(null,t,e),n)}function Ti(){}function _i(e,t){var n=ui();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Pi(e,t){var n=ui();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Oi(e,t){var n=Ho();qo(98>n?98:n,(function(){e(!0)})),qo(97<n?97:n,(function(){var n=Xa.transition;Xa.transition=1;try{e(!1),t()}finally{Xa.transition=n}}))}function Li(e,t,n){var r=su(),o=cu(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ja||null!==i&&i===Ja)ri=ni=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(a.eagerReducer=i,a.eagerState=u,sr(u,l))return}catch(e){}fu(e,o,r)}}var Ni={readContext:ia,useCallback:oi,useContext:oi,useEffect:oi,useImperativeHandle:oi,useLayoutEffect:oi,useMemo:oi,useReducer:oi,useRef:oi,useState:oi,useDebugValue:oi,useDeferredValue:oi,useTransition:oi,useMutableSource:oi,useOpaqueIdentifier:oi,unstable_isNewReconciler:!1},Ai={readContext:ia,useCallback:function(e,t){return li().memoizedState=[e,void 0===t?null:t],e},useContext:ia,useEffect:ki,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,bi(4,2,xi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return bi(4,2,e,t)},useMemo:function(e,t){var n=li();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=li();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Li.bind(null,Ja,e),[r.memoizedState,e]},useRef:vi,useState:mi,useDebugValue:Ti,useDeferredValue:function(e){var t=mi(e),n=t[0],r=t[1];return ki((function(){var t=Xa.transition;Xa.transition=1;try{r(e)}finally{Xa.transition=t}}),[e]),n},useTransition:function(){var e=mi(!1),t=e[0];return vi(e=Oi.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=li();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pi(r,e,t,n)},useOpaqueIdentifier:function(){if(Ba){var e=!1,t=function(e){return{$$typeof:M,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Kr++).toString(36))),Error(i(355))})),n=mi(t)[1];return 0==(2&Ja.mode)&&(Ja.flags|=516,yi(5,(function(){n("r:"+(Kr++).toString(36))}),void 0,null)),t}return mi(t="r:"+(Kr++).toString(36)),t},unstable_isNewReconciler:!1},Ri={readContext:ia,useCallback:_i,useContext:ia,useEffect:Ei,useImperativeHandle:Ci,useLayoutEffect:Si,useMemo:Pi,useReducer:ci,useRef:gi,useState:function(){return ci(si)},useDebugValue:Ti,useDeferredValue:function(e){var t=ci(si),n=t[0],r=t[1];return Ei((function(){var t=Xa.transition;Xa.transition=1;try{r(e)}finally{Xa.transition=t}}),[e]),n},useTransition:function(){var e=ci(si)[0];return[gi().current,e]},useMutableSource:hi,useOpaqueIdentifier:function(){return ci(si)[0]},unstable_isNewReconciler:!1},ji={readContext:ia,useCallback:_i,useContext:ia,useEffect:Ei,useImperativeHandle:Ci,useLayoutEffect:Si,useMemo:Pi,useReducer:fi,useRef:gi,useState:function(){return fi(si)},useDebugValue:Ti,useDeferredValue:function(e){var t=fi(si),n=t[0],r=t[1];return Ei((function(){var t=Xa.transition;Xa.transition=1;try{r(e)}finally{Xa.transition=t}}),[e]),n},useTransition:function(){var e=fi(si)[0];return[gi().current,e]},useMutableSource:hi,useOpaqueIdentifier:function(){return fi(si)[0]},unstable_isNewReconciler:!1},Mi=k.ReactCurrentOwner,zi=!1;function Ii(e,t,n,r){t.child=null===e?_a(t,null,n,r):Ta(t,e.child,n,r)}function Ui(e,t,n,r,o){n=n.render;var a=t.ref;return aa(t,o),r=ii(e,t,n,r,a,o),null===e||zi?(t.flags|=1,Ii(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Di(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||$u(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Hu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Fi(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:fr)(o,r)&&e.ref===t.ref)?nl(e,t,a):(t.flags|=1,(e=Vu(i,r)).ref=t.ref,e.return=t,t.child=e)}function Fi(e,t,n,r,o,a){if(null!==e&&fr(e.memoizedProps,r)&&e.ref===t.ref){if(zi=!1,0==(a&o))return t.lanes=e.lanes,nl(e,t,a);0!=(16384&e.flags)&&(zi=!0)}return Vi(e,t,n,r,a)}function Bi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bu(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(0,e),null;t.memoizedState={baseLanes:0},bu(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,bu(0,r);return Ii(e,t,o,n),t.child}function $i(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Vi(e,t,n,r,o){var a=vo(n)?mo:po.current;return a=yo(t,a),aa(t,o),n=ii(e,t,n,r,a,o),null===e||zi?(t.flags|=1,Ii(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Hi(e,t,n,r,o){if(vo(n)){var a=!0;ko(t)}else a=!1;if(aa(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ba(t,n,r),ka(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?ia(s):yo(t,s=vo(n)?mo:po.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&wa(t,i,r,s),la=!1;var d=t.memoizedState;i.state=d,pa(t,r,i,o),u=t.memoizedState,l!==r||d!==u||ho.current||la?("function"==typeof c&&(ya(t,n,c,r),u=t.memoizedState),(l=la||ga(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,sa(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Xo(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?ia(u):yo(t,u=vo(n)?mo:po.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&wa(t,i,r,u),la=!1,d=t.memoizedState,i.state=d,pa(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||ho.current||la?("function"==typeof p&&(ya(t,n,p,r),h=t.memoizedState),(s=la||ga(t,n,s,r,d,h,u))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Wi(e,t,n,r,a,o)}function Wi(e,t,n,r,o,a){$i(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&Eo(t,n,!1),nl(e,t,a);r=t.stateNode,Mi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ta(t,e.child,null,a),t.child=Ta(t,null,l,a)):Ii(e,t,l,a),t.memoizedState=r.state,o&&Eo(t,n,!0),t.child}function qi(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Ra(e,t.containerInfo)}var Qi,Zi,Ki,Yi={dehydrated:null,retryLane:0};function Xi(e,t,n){var r,o=t.pendingProps,a=Ia.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),co(Ia,1&a),null===e?(void 0!==o.fallback&&Ha(t),e=o.children,a=o.fallback,i?(e=Gi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Yi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Gi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Yi,t.lanes=33554432,e):((n=qu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Vu(i,l),null!==e?r=Vu(e,r):(r=Wu(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Yi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Vu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Gi(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=qu(t,o,0,null),n=Wu(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Ji(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oa(e.return,t)}function el(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function tl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ii(e,t,r.children,n),0!=(2&(r=Ia.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ji(e,n);else if(19===e.tag)Ji(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Ia,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ua(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),el(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ua(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}el(t,!0,n,null,a,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ul|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Vu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Vu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rl(e,t){if(!Ba)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ol(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return vo(t.type)&&go(),null;case 3:return ja(),so(ho),so(po),Ka(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(qa(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:za(t);var a=Aa(Na.current);if(n=t.type,null!==e&&null!=t.stateNode)Zi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Aa(Oa.current),qa(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Xr]=t,r[Gr]=l,n){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(e=0;e<Cr.length;e++)Or(Cr[e],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":ee(r,l),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Or("invalid",r);break;case"textarea":ue(r,l),Or("invalid",r)}for(var s in Se(n,l),e=null,l)l.hasOwnProperty(s)&&(a=l[s],"children"===s?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&Or("scroll",r));switch(n){case"input":Y(r),re(r,l,!0);break;case"textarea":Y(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Dr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Xr]=t,e[Gr]=r,Qi(e,t),t.stateNode=e,s=xe(n,r),n){case"dialog":Or("cancel",e),Or("close",e),a=r;break;case"iframe":case"object":case"embed":Or("load",e),a=r;break;case"video":case"audio":for(a=0;a<Cr.length;a++)Or(Cr[a],e);a=r;break;case"source":Or("error",e),a=r;break;case"img":case"image":case"link":Or("error",e),Or("load",e),a=r;break;case"details":Or("toggle",e),a=r;break;case"input":ee(e,r),a=J(e,r),Or("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Or("invalid",e);break;case"textarea":ue(e,r),a=le(e,r),Or("invalid",e);break;default:a=r}Se(n,a);var c=a;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?ke(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ye(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ve(e,f):"number"==typeof f&&ve(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Or("scroll",e):null!=f&&w(e,l,f,s))}switch(n){case"input":Y(e),re(e,r,!1);break;case"textarea":Y(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Z(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Dr)}$r(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ki(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Aa(Na.current),Aa(Oa.current),qa(t)?(r=t.stateNode,n=t.memoizedProps,r[Xr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Xr]=t,t.stateNode=r)}return null;case 13:return so(Ia),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&qa(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ia.current)?0===Ml&&(Ml=3):(0!==Ml&&3!==Ml||(Ml=4),null===Ll||0==(134217727&Ul)&&0==(134217727&Dl)||mu(Ll,Al))),(r||n)&&(t.flags|=4),null);case 4:return ja(),null===e&&Nr(t.stateNode.containerInfo),null;case 10:return ra(t),null;case 19:if(so(Ia),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)rl(r,!1);else{if(0!==Ml||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Ua(e))){for(t.flags|=64,rl(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(Ia,1&Ia.current|2),t.child}e=e.sibling}null!==r.tail&&Vo()>Vl&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ua(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Ba)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Vo()-r.renderingStartTime>Vl&&1073741824!==n&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Vo(),n.sibling=null,t=Ia.current,co(Ia,l?1&t|2:1&t),n):null;case 23:case 24:return wu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function al(e){switch(e.tag){case 1:vo(e.type)&&go();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(ja(),so(ho),so(po),Ka(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return za(e),null;case 13:return so(Ia),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return so(Ia),null;case 4:return ja(),null;case 10:return ra(e),null;case 23:case 24:return wu(),null;default:return null}}function il(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Qi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Zi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Aa(Oa.current);var i,l=null;switch(n){case"input":a=J(e,a),r=J(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Dr)}for(f in Se(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var s=a[f];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Or("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===M?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Ki=function(e,t,n,r){n!==r&&(t.flags|=4)};var ul="function"==typeof WeakMap?WeakMap:Map;function sl(e,t,n){(n=ca(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ql||(Ql=!0,Zl=r),ll(0,t)},n}function cl(e,t,n){(n=ca(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ll(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Kl?Kl=new Set([this]):Kl.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var fl="function"==typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Iu(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Xo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&qr(t.stateNode.containerInfo))}throw Error(i(163))}function hl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(ju(n,e),Ru(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Xo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ha(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}ha(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&$r(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&kt(n)))))}throw Error(i(163))}function ml(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function yl(e,t){if(xo&&"function"==typeof xo.onCommitFiberUnmount)try{xo.onCommitFiberUnmount(So,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))ju(t,n);else{r=t;try{o()}catch(e){Iu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(dl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Iu(t,e)}break;case 5:dl(t);break;case 4:El(e,t)}}function vl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function gl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(gl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?wl(e,n,t):kl(e,n,t)}function wl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Dr));else if(4!==r&&null!==(e=e.child))for(wl(e,t,n),e=e.sibling;null!==e;)wl(e,t,n),e=e.sibling}function kl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(kl(e,t,n),e=e.sibling;null!==e;)kl(e,t,n),e=e.sibling}function El(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(yl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(yl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function Sl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Gr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),xe(e,o),t=xe(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?ke(n,u):"dangerouslySetInnerHTML"===l?ye(n,u):"children"===l?ve(n,u):w(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,kt(n.containerInfo)));case 13:return null!==t.memoizedState&&($l=Vo(),ml(t.child,!0)),void xl(t);case 19:return void xl(t);case 23:case 24:return void ml(t,null!==t.memoizedState)}throw Error(i(163))}function xl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new fl),t.forEach((function(t){var r=Du.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Cl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Tl=Math.ceil,_l=k.ReactCurrentDispatcher,Pl=k.ReactCurrentOwner,Ol=0,Ll=null,Nl=null,Al=0,Rl=0,jl=uo(0),Ml=0,zl=null,Il=0,Ul=0,Dl=0,Fl=0,Bl=null,$l=0,Vl=1/0;function Hl(){Vl=Vo()+500}var Wl,ql=null,Ql=!1,Zl=null,Kl=null,Yl=!1,Xl=null,Gl=90,Jl=[],eu=[],tu=null,nu=0,ru=null,ou=-1,au=0,iu=0,lu=null,uu=!1;function su(){return 0!=(48&Ol)?Vo():-1!==ou?ou:ou=Vo()}function cu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ho()?1:2;if(0===au&&(au=Il),0!==Yo.transition){0!==iu&&(iu=null!==Bl?Bl.pendingLanes:0),e=au;var t=4186112&~iu;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Ho(),e=Dt(0!=(4&Ol)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),au)}function fu(e,t,n){if(50<nu)throw nu=0,ru=null,Error(i(185));if(null===(e=du(e,t)))return null;$t(e,t,n),e===Ll&&(Dl|=t,4===Ml&&mu(e,Al));var r=Ho();1===t?0!=(8&Ol)&&0==(48&Ol)?yu(e):(pu(e,n),0===Ol&&(Hl(),Zo())):(0==(4&Ol)||98!==r&&99!==r||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,n)),Bl=e}function du(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function pu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Vt(l),s=1<<u,c=a[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,zt(s);var f=Mt;a[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=It(e,e===Ll?Al:0),t=Mt,0===r)null!==n&&(n!==Io&&_o(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Io&&_o(n)}15===t?(n=yu.bind(null,e),null===Do?(Do=[n],Fo=To(Ao,Ko)):Do.push(n),n=Io):14===t?n=Qo(99,yu.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),n=Qo(n,hu.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function hu(e){if(ou=-1,iu=au=0,0!=(48&Ol))throw Error(i(327));var t=e.callbackNode;if(Au()&&e.callbackNode!==t)return null;var n=It(e,e===Ll?Al:0);if(0===n)return null;var r=n,o=Ol;Ol|=16;var a=Su();for(Ll===e&&Al===r||(Hl(),ku(e,r));;)try{Tu();break}catch(t){Eu(e,t)}if(na(),_l.current=a,Ol=o,null!==Nl?r=0:(Ll=null,Al=0,r=Ml),0!=(Il&Dl))ku(e,0);else if(0!==r){if(2===r&&(Ol|=64,e.hydrate&&(e.hydrate=!1,qr(e.containerInfo)),0!==(n=Ut(e))&&(r=xu(e,n))),1===r)throw t=zl,ku(e,0),mu(e,n),pu(e,Vo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:case 5:Ou(e);break;case 3:if(mu(e,n),(62914560&n)===n&&10<(r=$l+500-Vo())){if(0!==It(e,0))break;if(((o=e.suspendedLanes)&n)!==n){su(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Hr(Ou.bind(null,e),r);break}Ou(e);break;case 4:if(mu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Vt(n);a=1<<l,(l=r[l])>o&&(o=l),n&=~a}if(n=o,10<(n=(120>(n=Vo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Tl(n/1960))-n)){e.timeoutHandle=Hr(Ou.bind(null,e),n);break}Ou(e);break;default:throw Error(i(329))}}return pu(e,Vo()),e.callbackNode===t?hu.bind(null,e):null}function mu(e,t){for(t&=~Fl,t&=~Dl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Vt(t),r=1<<n;e[n]=-1,t&=~r}}function yu(e){if(0!=(48&Ol))throw Error(i(327));if(Au(),e===Ll&&0!=(e.expiredLanes&Al)){var t=Al,n=xu(e,t);0!=(Il&Dl)&&(n=xu(e,t=It(e,t)))}else n=xu(e,t=It(e,0));if(0!==e.tag&&2===n&&(Ol|=64,e.hydrate&&(e.hydrate=!1,qr(e.containerInfo)),0!==(t=Ut(e))&&(n=xu(e,t))),1===n)throw n=zl,ku(e,0),mu(e,t),pu(e,Vo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ou(e),pu(e,Vo()),null}function vu(e,t){var n=Ol;Ol|=1;try{return e(t)}finally{0===(Ol=n)&&(Hl(),Zo())}}function gu(e,t){var n=Ol;Ol&=-2,Ol|=8;try{return e(t)}finally{0===(Ol=n)&&(Hl(),Zo())}}function bu(e,t){co(jl,Rl),Rl|=t,Il|=t}function wu(){Rl=jl.current,so(jl)}function ku(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Wr(n)),null!==Nl)for(n=Nl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&go();break;case 3:ja(),so(ho),so(po),Ka();break;case 5:za(r);break;case 4:ja();break;case 13:case 19:so(Ia);break;case 10:ra(r);break;case 23:case 24:wu()}n=n.return}Ll=e,Nl=Vu(e.current,null),Al=Rl=Il=t,Ml=0,zl=null,Fl=Dl=Ul=0}function Eu(e,t){for(;;){var n=Nl;try{if(na(),Ya.current=Ni,ni){for(var r=Ja.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ni=!1}if(Ga=0,ti=ei=Ja=null,ri=!1,Pl.current=null,null===n||null===n.return){Ml=1,zl=t,Nl=null;break}e:{var a=e,i=n.return,l=n,u=t;if(t=Al,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Ia.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var y=d.updateQueue;if(null===y){var v=new Set;v.add(s),d.updateQueue=v}else y.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var g=ca(-1,1);g.tag=2,fa(l,g)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new ul,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var w=Uu.bind(null,a,s,l);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((Q(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ml&&(Ml=2),u=il(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,da(d,sl(0,a,t));break e;case 1:a=u;var k=d.type,E=d.stateNode;if(0==(64&d.flags)&&("function"==typeof k.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Kl||!Kl.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,da(d,cl(d,a,t));break e}}d=d.return}while(null!==d)}Pu(n)}catch(e){t=e,Nl===n&&null!==n&&(Nl=n=n.return);continue}break}}function Su(){var e=_l.current;return _l.current=Ni,null===e?Ni:e}function xu(e,t){var n=Ol;Ol|=16;var r=Su();for(Ll===e&&Al===t||ku(e,t);;)try{Cu();break}catch(t){Eu(e,t)}if(na(),Ol=n,_l.current=r,null!==Nl)throw Error(i(261));return Ll=null,Al=0,Ml}function Cu(){for(;null!==Nl;)_u(Nl)}function Tu(){for(;null!==Nl&&!Po();)_u(Nl)}function _u(e){var t=Wl(e.alternate,e,Rl);e.memoizedProps=e.pendingProps,null===t?Pu(e):Nl=t,Pl.current=null}function Pu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ol(n,t,Rl)))return void(Nl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Rl)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=al(t)))return n.flags&=2047,void(Nl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===Ml&&(Ml=5)}function Ou(e){var t=Ho();return qo(99,Lu.bind(null,e,t)),null}function Lu(e,t){do{Au()}while(null!==Xl);if(0!=(48&Ol))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var s=31-Vt(a),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,a&=~c}if(null!==tu&&0==(24&r)&&tu.has(e)&&tu.delete(e),e===Ll&&(Nl=Ll=null,Al=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ol,Ol|=32,Pl.current=null,Fr=Zt,yr(l=mr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,y=l,v=null;t:for(;;){for(var g;y!==u||0!==a&&3!==y.nodeType||(d=f+a),y!==s||0!==c&&3!==y.nodeType||(p=f+c),3===y.nodeType&&(f+=y.nodeValue.length),null!==(g=y.firstChild);)v=y,y=g;for(;;){if(y===l)break t;if(v===u&&++h===a&&(d=f),v===s&&++m===c&&(p=f),null!==(g=y.nextSibling))break;v=(y=v).parentNode}y=g}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Br={focusedElem:l,selectionRange:u},Zt=!1,lu=null,uu=!1,ql=r;do{try{Nu()}catch(e){if(null===ql)throw Error(i(330));Iu(ql,e),ql=ql.nextEffect}}while(null!==ql);lu=null,ql=r;do{try{for(l=e;null!==ql;){var b=ql.flags;if(16&b&&ve(ql.stateNode,""),128&b){var w=ql.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:bl(ql),ql.flags&=-3;break;case 6:bl(ql),ql.flags&=-3,Sl(ql.alternate,ql);break;case 1024:ql.flags&=-1025;break;case 1028:ql.flags&=-1025,Sl(ql.alternate,ql);break;case 4:Sl(ql.alternate,ql);break;case 8:El(l,u=ql);var E=u.alternate;vl(u),null!==E&&vl(E)}ql=ql.nextEffect}}catch(e){if(null===ql)throw Error(i(330));Iu(ql,e),ql=ql.nextEffect}}while(null!==ql);if(k=Br,w=mr(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&hr(b.ownerDocument.documentElement,b)){null!==l&&yr(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,E=Math.min(l.start,u),l=void 0===l.end?E:Math.min(l.end,u),!k.extend&&E>l&&(u=l,l=E,E=u),u=pr(b,E),a=pr(b,l),u&&a&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==a.node||k.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),E>l?(k.addRange(w),k.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Zt=!!Fr,Br=Fr=null,e.current=n,ql=r;do{try{for(b=e;null!==ql;){var S=ql.flags;if(36&S&&hl(b,ql.alternate,ql),128&S){w=void 0;var x=ql.ref;if(null!==x){var C=ql.stateNode;ql.tag,w=C,"function"==typeof x?x(w):x.current=w}}ql=ql.nextEffect}}catch(e){if(null===ql)throw Error(i(330));Iu(ql,e),ql=ql.nextEffect}}while(null!==ql);ql=null,Uo(),Ol=o}else e.current=n;if(Yl)Yl=!1,Xl=e,Gl=t;else for(ql=r;null!==ql;)t=ql.nextEffect,ql.nextEffect=null,8&ql.flags&&((S=ql).sibling=null,S.stateNode=null),ql=t;if(0===(r=e.pendingLanes)&&(Kl=null),1===r?e===ru?nu++:(nu=0,ru=e):nu=0,n=n.stateNode,xo&&"function"==typeof xo.onCommitFiberRoot)try{xo.onCommitFiberRoot(So,n,void 0,64==(64&n.current.flags))}catch(e){}if(pu(e,Vo()),Ql)throw Ql=!1,e=Zl,Zl=null,e;return 0!=(8&Ol)||Zo(),null}function Nu(){for(;null!==ql;){var e=ql.alternate;uu||null===lu||(0!=(8&ql.flags)?Je(ql,lu)&&(uu=!0):13===ql.tag&&Cl(e,ql)&&Je(ql,lu)&&(uu=!0));var t=ql.flags;0!=(256&t)&&pl(e,ql),0==(512&t)||Yl||(Yl=!0,Qo(97,(function(){return Au(),null}))),ql=ql.nextEffect}}function Au(){if(90!==Gl){var e=97<Gl?97:Gl;return Gl=90,qo(e,Mu)}return!1}function Ru(e,t){Jl.push(t,e),Yl||(Yl=!0,Qo(97,(function(){return Au(),null})))}function ju(e,t){eu.push(t,e),Yl||(Yl=!0,Qo(97,(function(){return Au(),null})))}function Mu(){if(null===Xl)return!1;var e=Xl;if(Xl=null,0!=(48&Ol))throw Error(i(331));var t=Ol;Ol|=32;var n=eu;eu=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Iu(a,e)}}for(n=Jl,Jl=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Iu(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Ol=t,Zo(),!0}function zu(e,t,n){fa(e,t=sl(0,t=il(n,t),1)),t=su(),null!==(e=du(e,1))&&($t(e,1,t),pu(e,t))}function Iu(e,t){if(3===e.tag)zu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){zu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Kl||!Kl.has(r))){var o=cl(n,e=il(t,e),1);if(fa(n,o),o=su(),null!==(n=du(n,1)))$t(n,1,o),pu(n,o);else if("function"==typeof r.componentDidCatch&&(null===Kl||!Kl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Uu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=su(),e.pingedLanes|=e.suspendedLanes&n,Ll===e&&(Al&n)===n&&(4===Ml||3===Ml&&(62914560&Al)===Al&&500>Vo()-$l?ku(e,0):Fl|=n),pu(e,t)}function Du(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ho()?1:2:(0===au&&(au=Il),0===(t=Ft(62914560&~au))&&(t=4194304))),n=su(),null!==(e=du(e,t))&&($t(e,t,n),pu(e,n))}function Fu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Bu(e,t,n,r){return new Fu(e,t,n,r)}function $u(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vu(e,t){var n=e.alternate;return null===n?((n=Bu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Hu(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)$u(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case x:return Wu(n.children,o,a,t);case z:l=8,o|=16;break;case C:l=8,o|=1;break;case T:return(e=Bu(12,n,t,8|o)).elementType=T,e.type=T,e.lanes=a,e;case L:return(e=Bu(13,n,t,o)).type=L,e.elementType=L,e.lanes=a,e;case N:return(e=Bu(19,n,t,o)).elementType=N,e.lanes=a,e;case I:return qu(n,o,a,t);case U:return(e=Bu(24,n,t,o)).elementType=U,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:l=10;break e;case P:l=9;break e;case O:l=11;break e;case A:l=14;break e;case R:l=16,r=null;break e;case j:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Bu(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Wu(e,t,n,r){return(e=Bu(7,e,r,t)).lanes=n,e}function qu(e,t,n,r){return(e=Bu(23,e,r,t)).elementType=I,e.lanes=n,e}function Qu(e,t,n){return(e=Bu(6,e,null,t)).lanes=n,e}function Zu(e,t,n){return(t=Bu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ku(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Yu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Xu(e,t,n,r){var o=t.current,a=su(),l=cu(o);e:if(n){t:{if(Ke(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(vo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(vo(s)){n=wo(n,s,u);break e}}n=u}else n=fo;return null===t.context?t.context=n:t.pendingContext=n,(t=ca(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),fa(o,t),fu(o,l,a),l}function Gu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ju(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function es(e,t){Ju(e,t),(e=e.alternate)&&Ju(e,t)}function ts(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Ku(e,t,null!=n&&!0===n.hydrate),t=Bu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ua(t),e[Jr]=n.current,Nr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function ns(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rs(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Gu(i);l.call(e)}}Xu(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new ts(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Gu(i);u.call(e)}}gu((function(){Xu(t,i,e,o)}))}return Gu(i)}function os(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ns(t))throw Error(i(200));return Yu(e,t,null,n)}Wl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ho.current)zi=!0;else{if(0==(n&r)){switch(zi=!1,t.tag){case 3:qi(t),Qa();break;case 5:Ma(t);break;case 1:vo(t.type)&&ko(t);break;case 4:Ra(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Go,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Xi(e,t,n):(co(Ia,1&Ia.current),null!==(t=nl(e,t,n))?t.sibling:null);co(Ia,1&Ia.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return tl(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(Ia,Ia.current),r)break;return null;case 23:case 24:return t.lanes=0,Bi(e,t,n)}return nl(e,t,n)}zi=0!=(16384&e.flags)}else zi=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=yo(t,po.current),aa(t,n),o=ii(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var a=!0;ko(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ua(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&ya(t,r,l,e),o.updater=va,t.stateNode=o,o._reactInternals=t,ka(t,r,e,n),t=Wi(null,t,r,!0,a,n)}else t.tag=0,Ii(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return $u(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===A)return 14}return 2}(o),e=Xo(o,e),a){case 0:t=Vi(null,t,o,e,n);break e;case 1:t=Hi(null,t,o,e,n);break e;case 11:t=Ui(null,t,o,e,n);break e;case 14:t=Di(null,t,o,Xo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Vi(e,t,r,o=t.elementType===r?o:Xo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Hi(e,t,r,o=t.elementType===r?o:Xo(r,o),n);case 3:if(qi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,sa(e,t),pa(t,r,null,n),(r=t.memoizedState.element)===o)Qa(),t=nl(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Fa=Qr(t.stateNode.containerInfo.firstChild),Da=t,a=Ba=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Za.push(a);for(n=_a(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ii(e,t,r,n),Qa();t=t.child}return t;case 5:return Ma(t),null===e&&Ha(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Vr(r,o)?l=null:null!==a&&Vr(r,a)&&(t.flags|=16),$i(e,t),Ii(e,t,l,n),t.child;case 6:return null===e&&Ha(t),null;case 13:return Xi(e,t,n);case 4:return Ra(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ta(t,null,r,n):Ii(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ui(e,t,r,o=t.elementType===r?o:Xo(r,o),n);case 7:return Ii(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ii(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(co(Go,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0==(a=sr(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!ho.current){t=nl(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===u.tag&&((c=ca(-1,n&-n)).tag=2,fa(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),oa(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Ii(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,aa(t,n),r=r(o=ia(o,a.unstable_observedBits)),t.flags|=1,Ii(e,t,r,n),t.child;case 14:return a=Xo(o=t.type,t.pendingProps),Di(e,t,o,a=Xo(o.type,a),r,n);case 15:return Fi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Xo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,vo(r)?(e=!0,ko(t)):e=!1,aa(t,n),ba(t,r,o),ka(t,r,o,n),Wi(null,t,r,!0,e,n);case 19:return tl(e,t,n);case 23:case 24:return Bi(e,t,n)}throw Error(i(156,t.tag))},ts.prototype.render=function(e){Xu(e,this._internalRoot,null,null)},ts.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xu(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(fu(e,4,su()),es(e,4))},tt=function(e){13===e.tag&&(fu(e,67108864,su()),es(e,67108864))},nt=function(e){if(13===e.tag){var t=su(),n=cu(e);fu(e,n,t),es(e,n)}},rt=function(e,t){return t()},Te=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(i(90));X(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Ae=vu,Re=function(e,t,n,r,o){var a=Ol;Ol|=4;try{return qo(98,e.bind(null,t,n,r,o))}finally{0===(Ol=a)&&(Hl(),Zo())}},je=function(){0==(49&Ol)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,Vo())}))}Zo()}(),Au())},Me=function(e,t){var n=Ol;Ol|=2;try{return e(t)}finally{0===(Ol=n)&&(Hl(),Zo())}};var as={Events:[no,ro,oo,Le,Ne,Au,{current:!1}]},is={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},ls={bundleType:is.bundleType,version:is.version,rendererPackageName:is.rendererPackageName,rendererConfig:is.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ge(e))?null:e.stateNode},findFiberByHostInstance:is.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var us=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!us.isDisabled&&us.supportsFiber)try{So=us.inject(ls),xo=us}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=as,t.createPortal=os,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Ge(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ol;if(0!=(48&n))return e(t);Ol|=1;try{if(e)return qo(99,e.bind(null,t))}finally{Ol=n,Zo()}},t.hydrate=function(e,t,n){if(!ns(t))throw Error(i(200));return rs(null,e,t,!0,n)},t.render=function(e,t,n){if(!ns(t))throw Error(i(200));return rs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!ns(e))throw Error(i(40));return!!e._reactRootContainer&&(gu((function(){rs(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=vu,t.unstable_createPortal=function(e,t){return os(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!ns(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return rs(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9590:e=>{var t="undefined"!=typeof Element,n="function"==typeof Map,r="function"==typeof Set,o="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function a(e,i){if(e===i)return!0;if(e&&i&&"object"==typeof e&&"object"==typeof i){if(e.constructor!==i.constructor)return!1;var l,u,s,c;if(Array.isArray(e)){if((l=e.length)!=i.length)return!1;for(u=l;0!=u--;)if(!a(e[u],i[u]))return!1;return!0}if(n&&e instanceof Map&&i instanceof Map){if(e.size!==i.size)return!1;for(c=e.entries();!(u=c.next()).done;)if(!i.has(u.value[0]))return!1;for(c=e.entries();!(u=c.next()).done;)if(!a(u.value[1],i.get(u.value[0])))return!1;return!0}if(r&&e instanceof Set&&i instanceof Set){if(e.size!==i.size)return!1;for(c=e.entries();!(u=c.next()).done;)if(!i.has(u.value[0]))return!1;return!0}if(o&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(i)){if((l=e.length)!=i.length)return!1;for(u=l;0!=u--;)if(e[u]!==i[u])return!1;return!0}if(e.constructor===RegExp)return e.source===i.source&&e.flags===i.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===i.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===i.toString();if((l=(s=Object.keys(e)).length)!==Object.keys(i).length)return!1;for(u=l;0!=u--;)if(!Object.prototype.hasOwnProperty.call(i,s[u]))return!1;if(t&&e instanceof Element)return!1;for(u=l;0!=u--;)if(("_owner"!==s[u]&&"__v"!==s[u]&&"__o"!==s[u]||!e.$$typeof)&&!a(e[s[u]],i[s[u]]))return!1;return!0}return e!=e&&i!=i}e.exports=function(e,t){try{return a(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}}},4593:(e,t,n)=>{"use strict";n.d(t,{q:()=>oe});var r,o,a,i,l=n(5697),u=n.n(l),s=n(3524),c=n.n(s),f=n(9590),d=n.n(f),p=n(7294),h=n(7418),m=n.n(h),y="bodyAttributes",v="htmlAttributes",g={BASE:"base",BODY:"body",HEAD:"head",HTML:"html",LINK:"link",META:"meta",NOSCRIPT:"noscript",SCRIPT:"script",STYLE:"style",TITLE:"title"},b=(Object.keys(g).map((function(e){return g[e]})),"charset"),w="cssText",k="href",E="innerHTML",S="itemprop",x="rel",C={accesskey:"accessKey",charset:"charSet",class:"className",contenteditable:"contentEditable",contextmenu:"contextMenu","http-equiv":"httpEquiv",itemprop:"itemProp",tabindex:"tabIndex"},T=Object.keys(C).reduce((function(e,t){return e[C[t]]=t,e}),{}),_=[g.NOSCRIPT,g.SCRIPT,g.STYLE],P="data-react-helmet",O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},N=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),A=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},R=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},j=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},M=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return!1===t?String(e):String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")},z=function(e){var t=B(e,g.TITLE),n=B(e,"titleTemplate");if(n&&t)return n.replace(/%s/g,(function(){return Array.isArray(t)?t.join(""):t}));var r=B(e,"defaultTitle");return t||r||void 0},I=function(e){return B(e,"onChangeClientState")||function(){}},U=function(e,t){return t.filter((function(t){return void 0!==t[e]})).map((function(t){return t[e]})).reduce((function(e,t){return A({},e,t)}),{})},D=function(e,t){return t.filter((function(e){return void 0!==e[g.BASE]})).map((function(e){return e[g.BASE]})).reverse().reduce((function(t,n){if(!t.length)for(var r=Object.keys(n),o=0;o<r.length;o++){var a=r[o].toLowerCase();if(-1!==e.indexOf(a)&&n[a])return t.concat(n)}return t}),[])},F=function(e,t,n){var r={};return n.filter((function(t){return!!Array.isArray(t[e])||(void 0!==t[e]&&q("Helmet: "+e+' should be of type "Array". Instead found type "'+O(t[e])+'"'),!1)})).map((function(t){return t[e]})).reverse().reduce((function(e,n){var o={};n.filter((function(e){for(var n=void 0,a=Object.keys(e),i=0;i<a.length;i++){var l=a[i],u=l.toLowerCase();-1===t.indexOf(u)||n===x&&"canonical"===e[n].toLowerCase()||u===x&&"stylesheet"===e[u].toLowerCase()||(n=u),-1===t.indexOf(l)||l!==E&&l!==w&&l!==S||(n=l)}if(!n||!e[n])return!1;var s=e[n].toLowerCase();return r[n]||(r[n]={}),o[n]||(o[n]={}),!r[n][s]&&(o[n][s]=!0,!0)})).reverse().forEach((function(t){return e.push(t)}));for(var a=Object.keys(o),i=0;i<a.length;i++){var l=a[i],u=m()({},r[l],o[l]);r[l]=u}return e}),[]).reverse()},B=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.hasOwnProperty(t))return r[t]}return null},$=(r=Date.now(),function(e){var t=Date.now();t-r>16?(r=t,e(t)):setTimeout((function(){$(e)}),0)}),V=function(e){return clearTimeout(e)},H="undefined"!=typeof window?window.requestAnimationFrame&&window.requestAnimationFrame.bind(window)||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||$:n.g.requestAnimationFrame||$,W="undefined"!=typeof window?window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||V:n.g.cancelAnimationFrame||V,q=function(e){return console&&"function"==typeof console.warn&&console.warn(e)},Q=null,Z=function(e,t){var n=e.baseTag,r=e.bodyAttributes,o=e.htmlAttributes,a=e.linkTags,i=e.metaTags,l=e.noscriptTags,u=e.onChangeClientState,s=e.scriptTags,c=e.styleTags,f=e.title,d=e.titleAttributes;X(g.BODY,r),X(g.HTML,o),Y(f,d);var p={baseTag:G(g.BASE,n),linkTags:G(g.LINK,a),metaTags:G(g.META,i),noscriptTags:G(g.NOSCRIPT,l),scriptTags:G(g.SCRIPT,s),styleTags:G(g.STYLE,c)},h={},m={};Object.keys(p).forEach((function(e){var t=p[e],n=t.newTags,r=t.oldTags;n.length&&(h[e]=n),r.length&&(m[e]=p[e].oldTags)})),t&&t(),u(e,h,m)},K=function(e){return Array.isArray(e)?e.join(""):e},Y=function(e,t){void 0!==e&&document.title!==e&&(document.title=K(e)),X(g.TITLE,t)},X=function(e,t){var n=document.getElementsByTagName(e)[0];if(n){for(var r=n.getAttribute(P),o=r?r.split(","):[],a=[].concat(o),i=Object.keys(t),l=0;l<i.length;l++){var u=i[l],s=t[u]||"";n.getAttribute(u)!==s&&n.setAttribute(u,s),-1===o.indexOf(u)&&o.push(u);var c=a.indexOf(u);-1!==c&&a.splice(c,1)}for(var f=a.length-1;f>=0;f--)n.removeAttribute(a[f]);o.length===a.length?n.removeAttribute(P):n.getAttribute(P)!==i.join(",")&&n.setAttribute(P,i.join(","))}},G=function(e,t){var n=document.head||document.querySelector(g.HEAD),r=n.querySelectorAll(e+"[data-react-helmet]"),o=Array.prototype.slice.call(r),a=[],i=void 0;return t&&t.length&&t.forEach((function(t){var n=document.createElement(e);for(var r in t)if(t.hasOwnProperty(r))if(r===E)n.innerHTML=t.innerHTML;else if(r===w)n.styleSheet?n.styleSheet.cssText=t.cssText:n.appendChild(document.createTextNode(t.cssText));else{var l=void 0===t[r]?"":t[r];n.setAttribute(r,l)}n.setAttribute(P,"true"),o.some((function(e,t){return i=t,n.isEqualNode(e)}))?o.splice(i,1):a.push(n)})),o.forEach((function(e){return e.parentNode.removeChild(e)})),a.forEach((function(e){return n.appendChild(e)})),{oldTags:o,newTags:a}},J=function(e){return Object.keys(e).reduce((function(t,n){var r=void 0!==e[n]?n+'="'+e[n]+'"':""+n;return t?t+" "+r:r}),"")},ee=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(e).reduce((function(t,n){return t[C[n]||n]=e[n],t}),t)},te=function(e,t,n){switch(e){case g.TITLE:return{toComponent:function(){return e=t.title,n=t.titleAttributes,(r={key:e})[P]=!0,o=ee(n,r),[p.createElement(g.TITLE,o,e)];var e,n,r,o},toString:function(){return function(e,t,n,r){var o=J(n),a=K(t);return o?"<"+e+' data-react-helmet="true" '+o+">"+M(a,r)+"</"+e+">":"<"+e+' data-react-helmet="true">'+M(a,r)+"</"+e+">"}(e,t.title,t.titleAttributes,n)}};case y:case v:return{toComponent:function(){return ee(t)},toString:function(){return J(t)}};default:return{toComponent:function(){return function(e,t){return t.map((function(t,n){var r,o=((r={key:n})[P]=!0,r);return Object.keys(t).forEach((function(e){var n=C[e]||e;if(n===E||n===w){var r=t.innerHTML||t.cssText;o.dangerouslySetInnerHTML={__html:r}}else o[n]=t[e]})),p.createElement(e,o)}))}(e,t)},toString:function(){return function(e,t,n){return t.reduce((function(t,r){var o=Object.keys(r).filter((function(e){return!(e===E||e===w)})).reduce((function(e,t){var o=void 0===r[t]?t:t+'="'+M(r[t],n)+'"';return e?e+" "+o:o}),""),a=r.innerHTML||r.cssText||"",i=-1===_.indexOf(e);return t+"<"+e+' data-react-helmet="true" '+o+(i?"/>":">"+a+"</"+e+">")}),"")}(e,t,n)}}}},ne=function(e){var t=e.baseTag,n=e.bodyAttributes,r=e.encode,o=e.htmlAttributes,a=e.linkTags,i=e.metaTags,l=e.noscriptTags,u=e.scriptTags,s=e.styleTags,c=e.title,f=void 0===c?"":c,d=e.titleAttributes;return{base:te(g.BASE,t,r),bodyAttributes:te(y,n,r),htmlAttributes:te(v,o,r),link:te(g.LINK,a,r),meta:te(g.META,i,r),noscript:te(g.NOSCRIPT,l,r),script:te(g.SCRIPT,u,r),style:te(g.STYLE,s,r),title:te(g.TITLE,{title:f,titleAttributes:d},r)}},re=c()((function(e){return{baseTag:D([k,"target"],e),bodyAttributes:U(y,e),defer:B(e,"defer"),encode:B(e,"encodeSpecialCharacters"),htmlAttributes:U(v,e),linkTags:F(g.LINK,[x,k],e),metaTags:F(g.META,["name",b,"http-equiv","property",S],e),noscriptTags:F(g.NOSCRIPT,[E],e),onChangeClientState:I(e),scriptTags:F(g.SCRIPT,["src",E],e),styleTags:F(g.STYLE,[w],e),title:z(e),titleAttributes:U("titleAttributes",e)}}),(function(e){Q&&W(Q),e.defer?Q=H((function(){Z(e,(function(){Q=null}))})):(Z(e),Q=null)}),ne)((function(){return null})),oe=(o=re,i=a=function(e){function t(){return L(this,t),j(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e){return!d()(this.props,e)},t.prototype.mapNestedChildrenToProps=function(e,t){if(!t)return null;switch(e.type){case g.SCRIPT:case g.NOSCRIPT:return{innerHTML:t};case g.STYLE:return{cssText:t}}throw new Error("<"+e.type+" /> elements are self-closing and can not contain children. Refer to our API for more information.")},t.prototype.flattenArrayTypeChildren=function(e){var t,n=e.child,r=e.arrayTypeChildren,o=e.newChildProps,a=e.nestedChildren;return A({},r,((t={})[n.type]=[].concat(r[n.type]||[],[A({},o,this.mapNestedChildrenToProps(n,a))]),t))},t.prototype.mapObjectTypeChildren=function(e){var t,n,r=e.child,o=e.newProps,a=e.newChildProps,i=e.nestedChildren;switch(r.type){case g.TITLE:return A({},o,((t={})[r.type]=i,t.titleAttributes=A({},a),t));case g.BODY:return A({},o,{bodyAttributes:A({},a)});case g.HTML:return A({},o,{htmlAttributes:A({},a)})}return A({},o,((n={})[r.type]=A({},a),n))},t.prototype.mapArrayTypeChildrenToProps=function(e,t){var n=A({},t);return Object.keys(e).forEach((function(t){var r;n=A({},n,((r={})[t]=e[t],r))})),n},t.prototype.warnOnInvalidChildren=function(e,t){return!0},t.prototype.mapChildrenToProps=function(e,t){var n=this,r={};return p.Children.forEach(e,(function(e){if(e&&e.props){var o=e.props,a=o.children,i=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(e).reduce((function(t,n){return t[T[n]||n]=e[n],t}),t)}(R(o,["children"]));switch(n.warnOnInvalidChildren(e,a),e.type){case g.LINK:case g.META:case g.NOSCRIPT:case g.SCRIPT:case g.STYLE:r=n.flattenArrayTypeChildren({child:e,arrayTypeChildren:r,newChildProps:i,nestedChildren:a});break;default:t=n.mapObjectTypeChildren({child:e,newProps:t,newChildProps:i,nestedChildren:a})}}})),t=this.mapArrayTypeChildrenToProps(r,t)},t.prototype.render=function(){var e=this.props,t=e.children,n=R(e,["children"]),r=A({},n);return t&&(r=this.mapChildrenToProps(t,r)),p.createElement(o,r)},N(t,null,[{key:"canUseDOM",set:function(e){o.canUseDOM=e}}]),t}(p.Component),a.propTypes={base:u().object,bodyAttributes:u().object,children:u().oneOfType([u().arrayOf(u().node),u().node]),defaultTitle:u().string,defer:u().bool,encodeSpecialCharacters:u().bool,htmlAttributes:u().object,link:u().arrayOf(u().object),meta:u().arrayOf(u().object),noscript:u().arrayOf(u().object),onChangeClientState:u().func,script:u().arrayOf(u().object),style:u().arrayOf(u().object),title:u().string,titleAttributes:u().object,titleTemplate:u().string},a.defaultProps={defer:!0,encodeSpecialCharacters:!0},a.peek=o.peek,a.rewind=function(){var e=o.rewind();return e||(e=ne({baseTag:[],bodyAttributes:{},encodeSpecialCharacters:!0,htmlAttributes:{},linkTags:[],metaTags:[],noscriptTags:[],scriptTags:[],styleTags:[],title:"",titleAttributes:{}})),e},i);oe.renderStatic=oe.rewind},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case y:case m:case u:return e;default:return t}}case o:return t}}}function E(e){return k(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=y,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return E(e)||k(e)===c},t.isConcurrentMode=E,t.isContextConsumer=function(e){return k(e)===s},t.isContextProvider=function(e){return k(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===d},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===y},t.isMemo=function(e){return k(e)===m},t.isPortal=function(e){return k(e)===o},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===i},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===v)},t.typeOf=k},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},3727:(e,t,n)=>{"use strict";n.d(t,{VK:()=>c,rU:()=>y,OL:()=>b});var r=n(5977),o=n(4578),a=n(7294),i=n(71),l=n(7462),u=n(3366),s=n(2177),c=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=(0,i.lX)(t.props),t}return(0,o.Z)(t,e),t.prototype.render=function(){return a.createElement(r.F0,{history:this.history,children:this.props.children})},t}(a.Component);a.Component;var f=function(e,t){return"function"==typeof e?e(t):e},d=function(e,t){return"string"==typeof e?(0,i.ob)(e,null,null,t):e},p=function(e){return e},h=a.forwardRef;void 0===h&&(h=p);var m=h((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,i=(0,u.Z)(e,["innerRef","navigate","onClick"]),s=i.target,c=(0,l.Z)({},i,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||s&&"_self"!==s||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=p!==h&&t||n,a.createElement("a",c)})),y=h((function(e,t){var n=e.component,o=void 0===n?m:n,c=e.replace,y=e.to,v=e.innerRef,g=(0,u.Z)(e,["component","replace","to","innerRef"]);return a.createElement(r.s6.Consumer,null,(function(e){e||(0,s.Z)(!1);var n=e.history,r=d(f(y,e.location),e.location),u=r?n.createHref(r):"",m=(0,l.Z)({},g,{href:u,navigate:function(){var t=f(y,e.location),r=(0,i.Ep)(e.location)===(0,i.Ep)(d(t));(c||r?n.replace:n.push)(t)}});return p!==h?m.ref=t||v:m.innerRef=v,a.createElement(o,m)}))})),v=function(e){return e},g=a.forwardRef;void 0===g&&(g=v);var b=g((function(e,t){var n=e["aria-current"],o=void 0===n?"page":n,i=e.activeClassName,c=void 0===i?"active":i,p=e.activeStyle,h=e.className,m=e.exact,b=e.isActive,w=e.location,k=e.sensitive,E=e.strict,S=e.style,x=e.to,C=e.innerRef,T=(0,u.Z)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return a.createElement(r.s6.Consumer,null,(function(e){e||(0,s.Z)(!1);var n=w||e.location,i=d(f(x,n),n),u=i.pathname,_=u&&u.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),P=_?(0,r.LX)(n.pathname,{path:_,exact:m,sensitive:k,strict:E}):null,O=!!(b?b(P,n):P),L="function"==typeof h?h(O):h,N="function"==typeof S?S(O):S;O&&(L=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(L,c),N=(0,l.Z)({},N,p));var A=(0,l.Z)({"aria-current":O&&o||null,className:L,style:N,to:i},T);return v!==g?A.ref=t||C:A.innerRef=C,a.createElement(y,A)}))}))},5977:(e,t,n)=>{"use strict";n.d(t,{l_:()=>_,AW:()=>N,F0:()=>E,rs:()=>A,s6:()=>k,LX:()=>L,EN:()=>R});var r=n(4578),o=n(7294),a=n(71),i=n(5697),l=n.n(i),u=1073741823,s="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const f=o.createContext||function(e,t){var n,a,i,f="__create-react-context-"+((s[i="__global_unique_id__"]=(s[i]||0)+1)+"__"),d=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}(0,r.Z)(n,e);var o=n.prototype;return o.getChildContext=function(){var e;return(e={})[f]=this.emitter,e},o.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((a=r)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?n=0:(n="function"==typeof t?t(r,o):u,0!=(n|=0)&&this.emitter.set(e.value,n))}var a,i},o.render=function(){return this.props.children},n}(o.Component);d.childContextTypes=((n={})[f]=l().object.isRequired,n);var p=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}(0,r.Z)(n,t);var o=n.prototype;return o.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?u:t},o.componentDidMount=function(){this.context[f]&&this.context[f].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?u:e},o.componentWillUnmount=function(){this.context[f]&&this.context[f].off(this.onUpdate)},o.getValue=function(){return this.context[f]?this.context[f].get():e},o.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(o.Component);return p.contextTypes=((a={})[f]=l().object,a),{Provider:d,Consumer:p}};var d=n(2177),p=n(7462),h=n(9658),m=n.n(h),y=(n(9864),n(3366)),v=n(8679),g=n.n(v),b=function(e){var t=f();return t.displayName=e,t},w=b("Router-History"),k=b("Router"),E=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}(0,r.Z)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},n.render=function(){return o.createElement(k.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},o.createElement(w.Provider,{children:this.props.children||null,value:this.props.history}))},t}(o.Component);o.Component;var S=function(e){function t(){return e.apply(this,arguments)||this}(0,r.Z)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(o.Component),x={},C=0;function T(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(x[e])return x[e];var t=m().compile(e);return C<1e4&&(x[e]=t,C++),t}(e)(t,{pretty:!0})}function _(e){var t=e.computedMatch,n=e.to,r=e.push,i=void 0!==r&&r;return o.createElement(k.Consumer,null,(function(e){e||(0,d.Z)(!1);var r=e.history,l=e.staticContext,u=i?r.push:r.replace,s=(0,a.ob)(t?"string"==typeof n?T(n,t.params):(0,p.Z)({},n,{pathname:T(n.pathname,t.params)}):n);return l?(u(s),null):o.createElement(S,{onMount:function(){u(s)},onUpdate:function(e,t){var n=(0,a.ob)(t.to);(0,a.Hp)(n,(0,p.Z)({},s,{key:n.key}))||u(s)},to:n})}))}var P={},O=0;function L(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,l=void 0!==i&&i,u=n.sensitive,s=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=P[n]||(P[n]={});if(r[e])return r[e];var o=[],a={regexp:m()(e,o,t),keys:o};return O<1e4&&(r[e]=a,O++),a}(n,{end:a,strict:l,sensitive:s}),o=r.regexp,i=r.keys,u=o.exec(e);if(!u)return null;var c=u[0],f=u.slice(1),d=e===c;return a&&!d?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:d,params:i.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var N=function(e){function t(){return e.apply(this,arguments)||this}return(0,r.Z)(t,e),t.prototype.render=function(){var e=this;return o.createElement(k.Consumer,null,(function(t){t||(0,d.Z)(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?L(n.pathname,e.props):t.match,a=(0,p.Z)({},t,{location:n,match:r}),i=e.props,l=i.children,u=i.component,s=i.render;return Array.isArray(l)&&function(e){return 0===o.Children.count(e)}(l)&&(l=null),o.createElement(k.Provider,{value:a},a.match?l?"function"==typeof l?l(a):l:u?o.createElement(u,a):s?s(a):null:"function"==typeof l?l(a):null)}))},t}(o.Component);o.Component;var A=function(e){function t(){return e.apply(this,arguments)||this}return(0,r.Z)(t,e),t.prototype.render=function(){var e=this;return o.createElement(k.Consumer,null,(function(t){t||(0,d.Z)(!1);var n,r,a=e.props.location||t.location;return o.Children.forEach(e.props.children,(function(e){if(null==r&&o.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?L(a.pathname,(0,p.Z)({},e.props,{path:i})):t.match}})),r?o.cloneElement(n,{location:a,computedMatch:r}):null}))},t}(o.Component);function R(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=(0,y.Z)(t,["wrappedComponentRef"]);return o.createElement(k.Consumer,null,(function(t){return t||(0,d.Z)(!1),o.createElement(e,(0,p.Z)({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,g()(n,e)}o.useContext},6585:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},9658:(e,t,n)=>{var r=n(6585);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],a=0;a<t.length;a++)o.push(e(t[a],n,r).source);return c(new RegExp("(?:"+o.join("|")+")",f(r)),n)}(t,n,o):function(e,t,n){return d(a(e,n),t,n)}(t,n,o)},e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,l="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(i,p),i=p+f.length,d)l+=d[1];else{var h=e[i],m=n[2],y=n[3],v=n[4],g=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var k=null!=m&&null!=h&&h!==m,E="+"===b||"*"===b,S="?"===b||"*"===b,x=n[2]||c,C=v||g;r.push({name:y||a++,prefix:m||"",delimiter:x,optional:S,repeat:E,partial:k,asterisk:!!w,pattern:C?s(C):w?".*":"[^"+u(x)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var a="",l=t||{},u=(o||{}).pretty?i:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=l[c.name];if(null==d){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');a+=c.prefix+f}}else a+=c}return a}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)i+=u(s);else{var d=u(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+d+p+")*"),i+=p=s.optional?s.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+i,f(n)),t)}},3524:(e,t,n)=>{"use strict";var r,o=n(7294),a=(r=o)&&"object"==typeof r&&"default"in r?r.default:r;function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var l=!("undefined"==typeof window||!window.document||!window.document.createElement);e.exports=function(e,t,n){if("function"!=typeof e)throw new Error("Expected reducePropsToState to be a function.");if("function"!=typeof t)throw new Error("Expected handleStateChangeOnClient to be a function.");if(void 0!==n&&"function"!=typeof n)throw new Error("Expected mapStateOnServer to either be undefined or a function.");return function(r){if("function"!=typeof r)throw new Error("Expected WrappedComponent to be a React component.");var u,s=[];function c(){u=e(s.map((function(e){return e.props}))),f.canUseDOM?t(u):n&&(u=n(u))}var f=function(e){var t,n;function o(){return e.apply(this,arguments)||this}n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.peek=function(){return u},o.rewind=function(){if(o.canUseDOM)throw new Error("You may only call rewind() on the server. Call peek() to read the current state.");var e=u;return u=void 0,s=[],e};var i=o.prototype;return i.UNSAFE_componentWillMount=function(){s.push(this),c()},i.componentDidUpdate=function(){c()},i.componentWillUnmount=function(){var e=s.indexOf(this);s.splice(e,1),c()},i.render=function(){return a.createElement(r,this.props)},o}(o.PureComponent);return i(f,"displayName","SideEffect("+function(e){return e.displayName||e.name||"Component"}(r)+")"),i(f,"canUseDOM",l),f}}},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function v(){}function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var b=g.prototype=new v;b.constructor=g,r(b,y.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!E.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function _(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===r?"."+T(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),_(i,t,n,"",(function(e){return e}))):null!=i&&(x(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+T(l=e[s],s);u+=_(l,t,n,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=_(l=l.value,t,n,c=r+T(l,s++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function P(e,t,n){if(null==e)return e;var r=[],o=0;return _(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function O(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var L={current:null};function N(){var e=L.current;if(null===e)throw Error(p(321));return e}var A={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error(p(143));return e}},t.Component=y,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)k.call(t,c)&&!E.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,y=null,v=-1,g=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,k=w.port2;w.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();b=e+g;try{y(!0,e)?k.postMessage(null):(m=!1,y=null)}catch(e){throw k.postMessage(null),e}}else m=!1},n=function(e){y=e,m||(m=!0,k.postMessage(null))},r=function(e,n){v=d((function(){e(t.unstable_now())}),n)},o=function(){p(v),v=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function S(e){return void 0===(e=e[0])?null:e}function x(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>C(i,n))void 0!==u&&0>C(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>C(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var T=[],_=[],P=1,O=null,L=3,N=!1,A=!1,R=!1;function j(e){for(var t=S(_);null!==t;){if(null===t.callback)x(_);else{if(!(t.startTime<=e))break;x(_),t.sortIndex=t.expirationTime,E(T,t)}t=S(_)}}function M(e){if(R=!1,j(e),!A)if(null!==S(T))A=!0,n(z);else{var t=S(_);null!==t&&r(M,t.startTime-e)}}function z(e,n){A=!1,R&&(R=!1,o()),N=!0;var a=L;try{for(j(n),O=S(T);null!==O&&(!(O.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=O.callback;if("function"==typeof i){O.callback=null,L=O.priorityLevel;var l=i(O.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?O.callback=l:O===S(T)&&x(T),j(n)}else x(T);O=S(T)}if(null!==O)var u=!0;else{var s=S(_);null!==s&&r(M,s.startTime-n),u=!1}return u}finally{O=null,L=a,N=!1}}var I=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||N||(A=!0,n(z))},t.unstable_getCurrentPriorityLevel=function(){return L},t.unstable_getFirstCallbackNode=function(){return S(T)},t.unstable_next=function(e){switch(L){case 1:case 2:case 3:var t=3;break;default:t=L}var n=L;L=t;try{return e()}finally{L=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=I,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=L;L=e;try{return t()}finally{L=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:P++,callback:a,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,E(_,e),null===S(T)&&e===S(_)&&(R?o():R=!0,r(M,i-l))):(e.sortIndex=u,E(T,e),A||N||(A=!0,n(z))),e},t.unstable_wrapCallback=function(e){var t=L;return function(){var n=L;L=t;try{return e.apply(this,arguments)}finally{L=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},2177:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});function r(e,t){if(!e)throw new Error("Invariant failed")}},7326:(e,t,n)=>{"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,{Z:()=>r})},5861:(e,t,n)=>{"use strict";function r(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(o,a){var i=e.apply(t,n);function l(e){r(i,o,a,l,u,"next",e)}function u(e){r(i,o,a,l,u,"throw",e)}l(void 0)}))}}n.d(t,{Z:()=>o})},5671:(e,t,n)=>{"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.d(t,{Z:()=>r})},3144:(e,t,n)=>{"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}n.d(t,{Z:()=>o})},4942:(e,t,n)=>{"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:()=>r})},7462:(e,t,n)=>{"use strict";function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},1120:(e,t,n)=>{"use strict";function r(e){return r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},r(e)}n.d(t,{Z:()=>r})},136:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(9611);function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&(0,r.Z)(e,t)}},4578:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(9611);function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,(0,r.Z)(e,t)}},3366:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:()=>r})},6215:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}n.d(t,{Z:()=>a});var o=n(7326);function a(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return(0,o.Z)(e)}},9611:(e,t,n)=>{"use strict";function r(e,t){return r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},r(e,t)}n.d(t,{Z:()=>r})},8152:(e,t,n)=>{"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}n.d(t,{Z:()=>o})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFMLENBQ0EsR0FBaUIsaUJBQU5BLEVBQWdCLE9BQU8sRUFBaUJBLEVBQUdrQixHQUN0RCxJQUFJL3BELEVBQUk5YSxPQUFPQyxVQUFVME8sU0FBU25MLEtBQUttZ0UsR0FBR2o4RCxNQUFNLEdBQUksR0FFcEQsTUFEVSxXQUFOb1QsR0FBa0I2b0QsRUFBRWo5RCxjQUFhb1UsRUFBSTZvRCxFQUFFajlELFlBQVlDLE1BQzdDLFFBQU5tVSxHQUFxQixRQUFOQSxFQUFvQjlKLE1BQU1xTCxLQUFLc25ELEdBQ3hDLGNBQU43b0QsR0FBcUIsMkNBQTJDeEQsS0FBS3dELEdBQVcsRUFBaUI2b0QsRUFBR2tCLFFBQXhHLEdIRjhELENBQTJCM3JELEVBQUs3UyxJSUxqRixXQUNiLE1BQU0sSUFBSXJCLFVBQVUsNklKSWdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9lc20vdmFsdWUtZXF1YWwuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWZhc3QtY29tcGFyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvcmVhY3QtaGVsbWV0L2VzL0hlbG1ldC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2lkZS1lZmZlY3QvbGliL2luZGV4LmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovL3RhbnR1bS1wbS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly90YW50dW0tcG0vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdGFudHVtLXBtLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIGRlZmluZShHcCwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gIGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvbik7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBkZWZpbmUoR3AsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIGluIG1vZGVybiBlbmdpbmVzXG4gIC8vIHdlIGNhbiBleHBsaWNpdGx5IGFjY2VzcyBnbG9iYWxUaGlzLiBJbiBvbGRlciBlbmdpbmVzIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIGdsb2JhbFRoaXMucmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbiAgfSBlbHNlIHtcbiAgICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB2YXIgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgIHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/ICdFVElNRURPVVQnIDogJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgKGNhbmNlbCAmJiBjYW5jZWwudHlwZSkgPyBuZXcgQ2FuY2VsKCdjYW5jZWxlZCcpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuYXhpb3MuVkVSU0lPTiA9IHJlcXVpcmUoJy4vZW52L2RhdGEnKS52ZXJzaW9uO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG5cbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4oZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbCA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgIH1cbiAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4gPSBmdW5jdGlvbihvbmZ1bGZpbGxlZCkge1xuICAgIHZhciBfcmVzb2x2ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgfVxuXG4gIGlmICghY29uZmlnLnVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgY29uZmlnIHVybCBpcyBub3QgdmFsaWQnKTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGlmICghY29uZmlnLnVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgY29uZmlnIHVybCBpcyBub3QgdmFsaWQnKTtcbiAgfVxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWQsXG4gICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsKCdjYW5jZWxlZCcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1lcmdlTWFwID0ge1xuICAgICd1cmwnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdtZXRob2QnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdkYXRhJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnYmFzZVVSTCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlcXVlc3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXNwb25zZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3BhcmFtc1NlcmlhbGl6ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dE1lc3NhZ2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd3aXRoQ3JlZGVudGlhbHMnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdhZGFwdGVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VUeXBlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkNvb2tpZU5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmSGVhZGVyTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uVXBsb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvbkRvd25sb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdkZWNvbXByZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Q29udGVudExlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heEJvZHlMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc3BvcnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwc0FnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnY2FuY2VsVG9rZW4nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdzb2NrZXRQYXRoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VFbmNvZGluZyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJzogbWVyZ2VEaXJlY3RLZXlzXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIHZhciBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgdmFyIGNvbmZpZ1ZhbHVlID0gbWVyZ2UocHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vY29yZS9lbmhhbmNlRXJyb3InKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDoge1xuICAgIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICAgIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG4gIH0sXG5cbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSB8fCAoaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgdmFyIHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICB2YXIgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgIHZhciBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgdmFyIHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcgfHwgKGZvcmNlZEpTT05QYXJzaW5nICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmIGRhdGEubGVuZ3RoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IGVuaGFuY2VFcnJvcihlLCB0aGlzLCAnRV9KU09OX1BBUlNFJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwidmVyc2lvblwiOiBcIjAuMjUuMFwiXG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2Vudi9kYXRhJykudmVyc2lvbjtcblxudmFyIHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUsIGkpIHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbnZhciBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG9wdCwgb3B0cykge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgdmFyIG9wdCA9IGtleXNbaV07XG4gICAgdmFyIHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0T3B0aW9uczogYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yczogdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBVUkxTZWFyY2hQYXJhbXNdJztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnRyaW0gPyBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTVxufTtcbiIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJmdW5jdGlvbiB2YWx1ZU9mKG9iaikge1xuICByZXR1cm4gb2JqLnZhbHVlT2YgPyBvYmoudmFsdWVPZigpIDogT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIC8vIFRlc3QgZm9yIHN0cmljdCBlcXVhbGl0eSBmaXJzdC5cbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIC8vIE90aGVyd2lzZSwgaWYgZWl0aGVyIG9mIHRoZW0gPT0gbnVsbCB0aGV5IGFyZSBub3QgZXF1YWwuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgQXJyYXkuaXNBcnJheShiKSAmJlxuICAgICAgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmXG4gICAgICBhLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IHZhbHVlT2YoYSk7XG4gICAgdmFyIGJWYWx1ZSA9IHZhbHVlT2YoYik7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGEsIGIpKS5ldmVyeShmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJpZ2ludDogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qIGdsb2JhbCBNYXA6cmVhZG9ubHksIFNldDpyZWFkb25seSwgQXJyYXlCdWZmZXI6cmVhZG9ubHkgKi9cblxudmFyIGhhc0VsZW1lbnRUeXBlID0gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xudmFyIGhhc01hcCA9IHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbic7XG52YXIgaGFzU2V0ID0gdHlwZW9mIFNldCA9PT0gJ2Z1bmN0aW9uJztcbnZhciBoYXNBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiAhIUFycmF5QnVmZmVyLmlzVmlldztcblxuLy8gTm90ZTogV2UgKipkb24ndCoqIG5lZWQgYGVudkhhc0JpZ0ludDY0QXJyYXlgIGluIGZkZSBlczYvaW5kZXguanNcblxuZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICAvLyBTVEFSVDogZmFzdC1kZWVwLWVxdWFsIGVzNi9pbmRleC5qcyAzLjEuMVxuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PSAnb2JqZWN0Jykge1xuICAgIGlmIChhLmNvbnN0cnVjdG9yICE9PSBiLmNvbnN0cnVjdG9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgbGVuZ3RoLCBpLCBrZXlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gU1RBUlQ6IE1vZGlmaWNhdGlvbnM6XG4gICAgLy8gMS4gRXh0cmEgYGhhczxUeXBlPiAmJmAgaGVscGVycyBpbiBpbml0aWFsIGNvbmRpdGlvbiBhbGxvdyBlczYgY29kZVxuICAgIC8vICAgIHRvIGNvLWV4aXN0IHdpdGggZXM1LlxuICAgIC8vIDIuIFJlcGxhY2UgYGZvciBvZmAgd2l0aCBlczUgY29tcGxpYW50IGl0ZXJhdGlvbiB1c2luZyBgZm9yYC5cbiAgICAvLyAgICBCYXNpY2FsbHksIHRha2U6XG4gICAgLy9cbiAgICAvLyAgICBgYGBqc1xuICAgIC8vICAgIGZvciAoaSBvZiBhLmVudHJpZXMoKSlcbiAgICAvLyAgICAgIGlmICghYi5oYXMoaVswXSkpIHJldHVybiBmYWxzZTtcbiAgICAvLyAgICBgYGBcbiAgICAvL1xuICAgIC8vICAgIC4uLiBhbmQgY29udmVydCB0bzpcbiAgICAvL1xuICAgIC8vICAgIGBgYGpzXG4gICAgLy8gICAgaXQgPSBhLmVudHJpZXMoKTtcbiAgICAvLyAgICB3aGlsZSAoIShpID0gaXQubmV4dCgpKS5kb25lKVxuICAgIC8vICAgICAgaWYgKCFiLmhhcyhpLnZhbHVlWzBdKSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vICAgIGBgYFxuICAgIC8vXG4gICAgLy8gICAgKipOb3RlKio6IGBpYCBhY2Nlc3Mgc3dpdGNoZXMgdG8gYGkudmFsdWVgLlxuICAgIHZhciBpdDtcbiAgICBpZiAoaGFzTWFwICYmIChhIGluc3RhbmNlb2YgTWFwKSAmJiAoYiBpbnN0YW5jZW9mIE1hcCkpIHtcbiAgICAgIGlmIChhLnNpemUgIT09IGIuc2l6ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaXQgPSBhLmVudHJpZXMoKTtcbiAgICAgIHdoaWxlICghKGkgPSBpdC5uZXh0KCkpLmRvbmUpXG4gICAgICAgIGlmICghYi5oYXMoaS52YWx1ZVswXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIGl0ID0gYS5lbnRyaWVzKCk7XG4gICAgICB3aGlsZSAoIShpID0gaXQubmV4dCgpKS5kb25lKVxuICAgICAgICBpZiAoIWVxdWFsKGkudmFsdWVbMV0sIGIuZ2V0KGkudmFsdWVbMF0pKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGhhc1NldCAmJiAoYSBpbnN0YW5jZW9mIFNldCkgJiYgKGIgaW5zdGFuY2VvZiBTZXQpKSB7XG4gICAgICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHJldHVybiBmYWxzZTtcbiAgICAgIGl0ID0gYS5lbnRyaWVzKCk7XG4gICAgICB3aGlsZSAoIShpID0gaXQubmV4dCgpKS5kb25lKVxuICAgICAgICBpZiAoIWIuaGFzKGkudmFsdWVbMF0pKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gRU5EOiBNb2RpZmljYXRpb25zXG5cbiAgICBpZiAoaGFzQXJyYXlCdWZmZXIgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KGEpICYmIEFycmF5QnVmZmVyLmlzVmlldyhiKSkge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoYS5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwKSByZXR1cm4gYS5zb3VyY2UgPT09IGIuc291cmNlICYmIGEuZmxhZ3MgPT09IGIuZmxhZ3M7XG4gICAgaWYgKGEudmFsdWVPZiAhPT0gT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mKSByZXR1cm4gYS52YWx1ZU9mKCkgPT09IGIudmFsdWVPZigpO1xuICAgIGlmIChhLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSByZXR1cm4gYS50b1N0cmluZygpID09PSBiLnRvU3RyaW5nKCk7XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIEVORDogZmFzdC1kZWVwLWVxdWFsXG5cbiAgICAvLyBTVEFSVDogcmVhY3QtZmFzdC1jb21wYXJlXG4gICAgLy8gY3VzdG9tIGhhbmRsaW5nIGZvciBET00gZWxlbWVudHNcbiAgICBpZiAoaGFzRWxlbWVudFR5cGUgJiYgYSBpbnN0YW5jZW9mIEVsZW1lbnQpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIGN1c3RvbSBoYW5kbGluZyBmb3IgUmVhY3QvUHJlYWN0XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICBpZiAoKGtleXNbaV0gPT09ICdfb3duZXInIHx8IGtleXNbaV0gPT09ICdfX3YnIHx8IGtleXNbaV0gPT09ICdfX28nKSAmJiBhLiQkdHlwZW9mKSB7XG4gICAgICAgIC8vIFJlYWN0LXNwZWNpZmljOiBhdm9pZCB0cmF2ZXJzaW5nIFJlYWN0IGVsZW1lbnRzJyBfb3duZXJcbiAgICAgICAgLy8gUHJlYWN0LXNwZWNpZmljOiBhdm9pZCB0cmF2ZXJzaW5nIFByZWFjdCBlbGVtZW50cycgX192IGFuZCBfX29cbiAgICAgICAgLy8gICAgX192ID0gJF9vcmlnaW5hbCAvICRfdm5vZGVcbiAgICAgICAgLy8gICAgX19vID0gJF9vd25lclxuICAgICAgICAvLyBUaGVzZSBwcm9wZXJ0aWVzIGNvbnRhaW4gY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgYXJlIG5vdCBuZWVkZWQgd2hlblxuICAgICAgICAvLyBjb21wYXJpbmcgdGhlIGFjdHVhbCBlbGVtZW50cyAoYW5kIG5vdCB0aGVpciBvd25lcnMpXG4gICAgICAgIC8vIC4kJHR5cGVvZiBhbmQgLl9zdG9yZSBvbiBqdXN0IHJlYXNvbmFibGUgbWFya2VycyBvZiBlbGVtZW50c1xuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBhbGwgb3RoZXIgcHJvcGVydGllcyBzaG91bGQgYmUgdHJhdmVyc2VkIGFzIHVzdWFsXG4gICAgICBpZiAoIWVxdWFsKGFba2V5c1tpXV0sIGJba2V5c1tpXV0pKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIEVORDogcmVhY3QtZmFzdC1jb21wYXJlXG5cbiAgICAvLyBTVEFSVDogZmFzdC1kZWVwLWVxdWFsXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gYSAhPT0gYSAmJiBiICE9PSBiO1xufVxuLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzRXF1YWwoYSwgYikge1xuICB0cnkge1xuICAgIHJldHVybiBlcXVhbChhLCBiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoKChlcnJvci5tZXNzYWdlIHx8ICcnKS5tYXRjaCgvc3RhY2t8cmVjdXJzaW9uL2kpKSkge1xuICAgICAgLy8gd2FybiBvbiBjaXJjdWxhciByZWZlcmVuY2VzLCBkb24ndCBjcmFzaFxuICAgICAgLy8gYnJvd3NlcnMgZ2l2ZSB0aGlzIGRpZmZlcmVudCBlcnJvcnMgbmFtZSBhbmQgbWVzc2FnZXM6XG4gICAgICAvLyBjaHJvbWUvc2FmYXJpOiBcIlJhbmdlRXJyb3JcIiwgXCJNYXhpbXVtIGNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiXG4gICAgICAvLyBmaXJlZm94OiBcIkludGVybmFsRXJyb3JcIiwgdG9vIG11Y2ggcmVjdXJzaW9uXCJcbiAgICAgIC8vIGVkZ2U6IFwiRXJyb3JcIiwgXCJPdXQgb2Ygc3RhY2sgc3BhY2VcIlxuICAgICAgY29uc29sZS53YXJuKCdyZWFjdC1mYXN0LWNvbXBhcmUgY2Fubm90IGhhbmRsZSBjaXJjdWxhciByZWZzJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIHNvbWUgb3RoZXIgZXJyb3IuIHdlIHNob3VsZCBkZWZpbml0ZWx5IGtub3cgYWJvdXQgdGhlc2VcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2l0aFNpZGVFZmZlY3QgZnJvbSAncmVhY3Qtc2lkZS1lZmZlY3QnO1xuaW1wb3J0IGlzRXF1YWwgZnJvbSAncmVhY3QtZmFzdC1jb21wYXJlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgb2JqZWN0QXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuXG52YXIgQVRUUklCVVRFX05BTUVTID0ge1xuICAgIEJPRFk6IFwiYm9keUF0dHJpYnV0ZXNcIixcbiAgICBIVE1MOiBcImh0bWxBdHRyaWJ1dGVzXCIsXG4gICAgVElUTEU6IFwidGl0bGVBdHRyaWJ1dGVzXCJcbn07XG5cbnZhciBUQUdfTkFNRVMgPSB7XG4gICAgQkFTRTogXCJiYXNlXCIsXG4gICAgQk9EWTogXCJib2R5XCIsXG4gICAgSEVBRDogXCJoZWFkXCIsXG4gICAgSFRNTDogXCJodG1sXCIsXG4gICAgTElOSzogXCJsaW5rXCIsXG4gICAgTUVUQTogXCJtZXRhXCIsXG4gICAgTk9TQ1JJUFQ6IFwibm9zY3JpcHRcIixcbiAgICBTQ1JJUFQ6IFwic2NyaXB0XCIsXG4gICAgU1RZTEU6IFwic3R5bGVcIixcbiAgICBUSVRMRTogXCJ0aXRsZVwiXG59O1xuXG52YXIgVkFMSURfVEFHX05BTUVTID0gT2JqZWN0LmtleXMoVEFHX05BTUVTKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gVEFHX05BTUVTW25hbWVdO1xufSk7XG5cbnZhciBUQUdfUFJPUEVSVElFUyA9IHtcbiAgICBDSEFSU0VUOiBcImNoYXJzZXRcIixcbiAgICBDU1NfVEVYVDogXCJjc3NUZXh0XCIsXG4gICAgSFJFRjogXCJocmVmXCIsXG4gICAgSFRUUEVRVUlWOiBcImh0dHAtZXF1aXZcIixcbiAgICBJTk5FUl9IVE1MOiBcImlubmVySFRNTFwiLFxuICAgIElURU1fUFJPUDogXCJpdGVtcHJvcFwiLFxuICAgIE5BTUU6IFwibmFtZVwiLFxuICAgIFBST1BFUlRZOiBcInByb3BlcnR5XCIsXG4gICAgUkVMOiBcInJlbFwiLFxuICAgIFNSQzogXCJzcmNcIixcbiAgICBUQVJHRVQ6IFwidGFyZ2V0XCJcbn07XG5cbnZhciBSRUFDVF9UQUdfTUFQID0ge1xuICAgIGFjY2Vzc2tleTogXCJhY2Nlc3NLZXlcIixcbiAgICBjaGFyc2V0OiBcImNoYXJTZXRcIixcbiAgICBjbGFzczogXCJjbGFzc05hbWVcIixcbiAgICBjb250ZW50ZWRpdGFibGU6IFwiY29udGVudEVkaXRhYmxlXCIsXG4gICAgY29udGV4dG1lbnU6IFwiY29udGV4dE1lbnVcIixcbiAgICBcImh0dHAtZXF1aXZcIjogXCJodHRwRXF1aXZcIixcbiAgICBpdGVtcHJvcDogXCJpdGVtUHJvcFwiLFxuICAgIHRhYmluZGV4OiBcInRhYkluZGV4XCJcbn07XG5cbnZhciBIRUxNRVRfUFJPUFMgPSB7XG4gICAgREVGQVVMVF9USVRMRTogXCJkZWZhdWx0VGl0bGVcIixcbiAgICBERUZFUjogXCJkZWZlclwiLFxuICAgIEVOQ09ERV9TUEVDSUFMX0NIQVJBQ1RFUlM6IFwiZW5jb2RlU3BlY2lhbENoYXJhY3RlcnNcIixcbiAgICBPTl9DSEFOR0VfQ0xJRU5UX1NUQVRFOiBcIm9uQ2hhbmdlQ2xpZW50U3RhdGVcIixcbiAgICBUSVRMRV9URU1QTEFURTogXCJ0aXRsZVRlbXBsYXRlXCJcbn07XG5cbnZhciBIVE1MX1RBR19NQVAgPSBPYmplY3Qua2V5cyhSRUFDVF9UQUdfTUFQKS5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gICAgb2JqW1JFQUNUX1RBR19NQVBba2V5XV0gPSBrZXk7XG4gICAgcmV0dXJuIG9iajtcbn0sIHt9KTtcblxudmFyIFNFTEZfQ0xPU0lOR19UQUdTID0gW1RBR19OQU1FUy5OT1NDUklQVCwgVEFHX05BTUVTLlNDUklQVCwgVEFHX05BTUVTLlNUWUxFXTtcblxudmFyIEhFTE1FVF9BVFRSSUJVVEUgPSBcImRhdGEtcmVhY3QtaGVsbWV0XCI7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIGluaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTtcblxudmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xuICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlO1xuICAgIHRhcmdldFtpXSA9IG9ialtpXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxudmFyIGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzID0gZnVuY3Rpb24gZW5jb2RlU3BlY2lhbENoYXJhY3RlcnMoc3RyKSB7XG4gICAgdmFyIGVuY29kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICAgIGlmIChlbmNvZGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoc3RyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZSgvJi9nLCBcIiZhbXA7XCIpLnJlcGxhY2UoLzwvZywgXCImbHQ7XCIpLnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpLnJlcGxhY2UoL1wiL2csIFwiJnF1b3Q7XCIpLnJlcGxhY2UoLycvZywgXCImI3gyNztcIik7XG59O1xuXG52YXIgZ2V0VGl0bGVGcm9tUHJvcHNMaXN0ID0gZnVuY3Rpb24gZ2V0VGl0bGVGcm9tUHJvcHNMaXN0KHByb3BzTGlzdCkge1xuICAgIHZhciBpbm5lcm1vc3RUaXRsZSA9IGdldElubmVybW9zdFByb3BlcnR5KHByb3BzTGlzdCwgVEFHX05BTUVTLlRJVExFKTtcbiAgICB2YXIgaW5uZXJtb3N0VGVtcGxhdGUgPSBnZXRJbm5lcm1vc3RQcm9wZXJ0eShwcm9wc0xpc3QsIEhFTE1FVF9QUk9QUy5USVRMRV9URU1QTEFURSk7XG5cbiAgICBpZiAoaW5uZXJtb3N0VGVtcGxhdGUgJiYgaW5uZXJtb3N0VGl0bGUpIHtcbiAgICAgICAgLy8gdXNlIGZ1bmN0aW9uIGFyZyB0byBhdm9pZCBuZWVkIHRvIGVzY2FwZSAkIGNoYXJhY3RlcnNcbiAgICAgICAgcmV0dXJuIGlubmVybW9zdFRlbXBsYXRlLnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGlubmVybW9zdFRpdGxlKSA/IGlubmVybW9zdFRpdGxlLmpvaW4oXCJcIikgOiBpbm5lcm1vc3RUaXRsZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGlubmVybW9zdERlZmF1bHRUaXRsZSA9IGdldElubmVybW9zdFByb3BlcnR5KHByb3BzTGlzdCwgSEVMTUVUX1BST1BTLkRFRkFVTFRfVElUTEUpO1xuXG4gICAgcmV0dXJuIGlubmVybW9zdFRpdGxlIHx8IGlubmVybW9zdERlZmF1bHRUaXRsZSB8fCB1bmRlZmluZWQ7XG59O1xuXG52YXIgZ2V0T25DaGFuZ2VDbGllbnRTdGF0ZSA9IGZ1bmN0aW9uIGdldE9uQ2hhbmdlQ2xpZW50U3RhdGUocHJvcHNMaXN0KSB7XG4gICAgcmV0dXJuIGdldElubmVybW9zdFByb3BlcnR5KHByb3BzTGlzdCwgSEVMTUVUX1BST1BTLk9OX0NIQU5HRV9DTElFTlRfU1RBVEUpIHx8IGZ1bmN0aW9uICgpIHt9O1xufTtcblxudmFyIGdldEF0dHJpYnV0ZXNGcm9tUHJvcHNMaXN0ID0gZnVuY3Rpb24gZ2V0QXR0cmlidXRlc0Zyb21Qcm9wc0xpc3QodGFnVHlwZSwgcHJvcHNMaXN0KSB7XG4gICAgcmV0dXJuIHByb3BzTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcHJvcHNbdGFnVHlwZV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgfSkubWFwKGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICByZXR1cm4gcHJvcHNbdGFnVHlwZV07XG4gICAgfSkucmVkdWNlKGZ1bmN0aW9uICh0YWdBdHRycywgY3VycmVudCkge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRhZ0F0dHJzLCBjdXJyZW50KTtcbiAgICB9LCB7fSk7XG59O1xuXG52YXIgZ2V0QmFzZVRhZ0Zyb21Qcm9wc0xpc3QgPSBmdW5jdGlvbiBnZXRCYXNlVGFnRnJvbVByb3BzTGlzdChwcmltYXJ5QXR0cmlidXRlcywgcHJvcHNMaXN0KSB7XG4gICAgcmV0dXJuIHByb3BzTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcHJvcHNbVEFHX05BTUVTLkJBU0VdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgIH0pLm1hcChmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzW1RBR19OQU1FUy5CQVNFXTtcbiAgICB9KS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChpbm5lcm1vc3RCYXNlVGFnLCB0YWcpIHtcbiAgICAgICAgaWYgKCFpbm5lcm1vc3RCYXNlVGFnLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0YWcpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlS2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgbG93ZXJDYXNlQXR0cmlidXRlS2V5ID0gYXR0cmlidXRlS2V5LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJpbWFyeUF0dHJpYnV0ZXMuaW5kZXhPZihsb3dlckNhc2VBdHRyaWJ1dGVLZXkpICE9PSAtMSAmJiB0YWdbbG93ZXJDYXNlQXR0cmlidXRlS2V5XSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5uZXJtb3N0QmFzZVRhZy5jb25jYXQodGFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5uZXJtb3N0QmFzZVRhZztcbiAgICB9LCBbXSk7XG59O1xuXG52YXIgZ2V0VGFnc0Zyb21Qcm9wc0xpc3QgPSBmdW5jdGlvbiBnZXRUYWdzRnJvbVByb3BzTGlzdCh0YWdOYW1lLCBwcmltYXJ5QXR0cmlidXRlcywgcHJvcHNMaXN0KSB7XG4gICAgLy8gQ2FsY3VsYXRlIGxpc3Qgb2YgdGFncywgZ2l2aW5nIHByaW9yaXR5IGlubmVybW9zdCBjb21wb25lbnQgKGVuZCBvZiB0aGUgcHJvcHNsaXN0KVxuICAgIHZhciBhcHByb3ZlZFNlZW5UYWdzID0ge307XG5cbiAgICByZXR1cm4gcHJvcHNMaXN0LmZpbHRlcihmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHNbdGFnTmFtZV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHByb3BzW3RhZ05hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB3YXJuKFwiSGVsbWV0OiBcIiArIHRhZ05hbWUgKyBcIiBzaG91bGQgYmUgb2YgdHlwZSBcXFwiQXJyYXlcXFwiLiBJbnN0ZWFkIGZvdW5kIHR5cGUgXFxcIlwiICsgX3R5cGVvZihwcm9wc1t0YWdOYW1lXSkgKyBcIlxcXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pLm1hcChmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzW3RhZ05hbWVdO1xuICAgIH0pLnJldmVyc2UoKS5yZWR1Y2UoZnVuY3Rpb24gKGFwcHJvdmVkVGFncywgaW5zdGFuY2VUYWdzKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZVNlZW5UYWdzID0ge307XG5cbiAgICAgICAgaW5zdGFuY2VUYWdzLmZpbHRlcihmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgICAgICB2YXIgcHJpbWFyeUF0dHJpYnV0ZUtleSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGFnKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVLZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBsb3dlckNhc2VBdHRyaWJ1dGVLZXkgPSBhdHRyaWJ1dGVLZXkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgcnVsZSB3aXRoIGxpbmsgdGFncywgc2luY2UgcmVsIGFuZCBocmVmIGFyZSBib3RoIHByaW1hcnkgdGFncywgcmVsIHRha2VzIHByaW9yaXR5XG4gICAgICAgICAgICAgICAgaWYgKHByaW1hcnlBdHRyaWJ1dGVzLmluZGV4T2YobG93ZXJDYXNlQXR0cmlidXRlS2V5KSAhPT0gLTEgJiYgIShwcmltYXJ5QXR0cmlidXRlS2V5ID09PSBUQUdfUFJPUEVSVElFUy5SRUwgJiYgdGFnW3ByaW1hcnlBdHRyaWJ1dGVLZXldLnRvTG93ZXJDYXNlKCkgPT09IFwiY2Fub25pY2FsXCIpICYmICEobG93ZXJDYXNlQXR0cmlidXRlS2V5ID09PSBUQUdfUFJPUEVSVElFUy5SRUwgJiYgdGFnW2xvd2VyQ2FzZUF0dHJpYnV0ZUtleV0udG9Mb3dlckNhc2UoKSA9PT0gXCJzdHlsZXNoZWV0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByaW1hcnlBdHRyaWJ1dGVLZXkgPSBsb3dlckNhc2VBdHRyaWJ1dGVLZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgaW5uZXJIVE1MIHdoaWNoIGRvZXNuJ3Qgd29yayBsb3dlcmNhc2VkXG4gICAgICAgICAgICAgICAgaWYgKHByaW1hcnlBdHRyaWJ1dGVzLmluZGV4T2YoYXR0cmlidXRlS2V5KSAhPT0gLTEgJiYgKGF0dHJpYnV0ZUtleSA9PT0gVEFHX1BST1BFUlRJRVMuSU5ORVJfSFRNTCB8fCBhdHRyaWJ1dGVLZXkgPT09IFRBR19QUk9QRVJUSUVTLkNTU19URVhUIHx8IGF0dHJpYnV0ZUtleSA9PT0gVEFHX1BST1BFUlRJRVMuSVRFTV9QUk9QKSkge1xuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5QXR0cmlidXRlS2V5ID0gYXR0cmlidXRlS2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFwcmltYXJ5QXR0cmlidXRlS2V5IHx8ICF0YWdbcHJpbWFyeUF0dHJpYnV0ZUtleV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRhZ1twcmltYXJ5QXR0cmlidXRlS2V5XS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICBpZiAoIWFwcHJvdmVkU2VlblRhZ3NbcHJpbWFyeUF0dHJpYnV0ZUtleV0pIHtcbiAgICAgICAgICAgICAgICBhcHByb3ZlZFNlZW5UYWdzW3ByaW1hcnlBdHRyaWJ1dGVLZXldID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaW5zdGFuY2VTZWVuVGFnc1twcmltYXJ5QXR0cmlidXRlS2V5XSkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlU2VlblRhZ3NbcHJpbWFyeUF0dHJpYnV0ZUtleV0gPSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFhcHByb3ZlZFNlZW5UYWdzW3ByaW1hcnlBdHRyaWJ1dGVLZXldW3ZhbHVlXSkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlU2VlblRhZ3NbcHJpbWFyeUF0dHJpYnV0ZUtleV1bdmFsdWVdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KS5yZXZlcnNlKCkuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwcm92ZWRUYWdzLnB1c2godGFnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIHNlZW4gdGFncyB3aXRoIHRhZ3MgZnJvbSB0aGlzIGluc3RhbmNlXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaW5zdGFuY2VTZWVuVGFncyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZUtleSA9IGtleXNbaV07XG4gICAgICAgICAgICB2YXIgdGFnVW5pb24gPSBvYmplY3RBc3NpZ24oe30sIGFwcHJvdmVkU2VlblRhZ3NbYXR0cmlidXRlS2V5XSwgaW5zdGFuY2VTZWVuVGFnc1thdHRyaWJ1dGVLZXldKTtcblxuICAgICAgICAgICAgYXBwcm92ZWRTZWVuVGFnc1thdHRyaWJ1dGVLZXldID0gdGFnVW5pb247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXBwcm92ZWRUYWdzO1xuICAgIH0sIFtdKS5yZXZlcnNlKCk7XG59O1xuXG52YXIgZ2V0SW5uZXJtb3N0UHJvcGVydHkgPSBmdW5jdGlvbiBnZXRJbm5lcm1vc3RQcm9wZXJ0eShwcm9wc0xpc3QsIHByb3BlcnR5KSB7XG4gICAgZm9yICh2YXIgaSA9IHByb3BzTGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB2YXIgcHJvcHMgPSBwcm9wc0xpc3RbaV07XG5cbiAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BzW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufTtcblxudmFyIHJlZHVjZVByb3BzVG9TdGF0ZSA9IGZ1bmN0aW9uIHJlZHVjZVByb3BzVG9TdGF0ZShwcm9wc0xpc3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBiYXNlVGFnOiBnZXRCYXNlVGFnRnJvbVByb3BzTGlzdChbVEFHX1BST1BFUlRJRVMuSFJFRiwgVEFHX1BST1BFUlRJRVMuVEFSR0VUXSwgcHJvcHNMaXN0KSxcbiAgICAgICAgYm9keUF0dHJpYnV0ZXM6IGdldEF0dHJpYnV0ZXNGcm9tUHJvcHNMaXN0KEFUVFJJQlVURV9OQU1FUy5CT0RZLCBwcm9wc0xpc3QpLFxuICAgICAgICBkZWZlcjogZ2V0SW5uZXJtb3N0UHJvcGVydHkocHJvcHNMaXN0LCBIRUxNRVRfUFJPUFMuREVGRVIpLFxuICAgICAgICBlbmNvZGU6IGdldElubmVybW9zdFByb3BlcnR5KHByb3BzTGlzdCwgSEVMTUVUX1BST1BTLkVOQ09ERV9TUEVDSUFMX0NIQVJBQ1RFUlMpLFxuICAgICAgICBodG1sQXR0cmlidXRlczogZ2V0QXR0cmlidXRlc0Zyb21Qcm9wc0xpc3QoQVRUUklCVVRFX05BTUVTLkhUTUwsIHByb3BzTGlzdCksXG4gICAgICAgIGxpbmtUYWdzOiBnZXRUYWdzRnJvbVByb3BzTGlzdChUQUdfTkFNRVMuTElOSywgW1RBR19QUk9QRVJUSUVTLlJFTCwgVEFHX1BST1BFUlRJRVMuSFJFRl0sIHByb3BzTGlzdCksXG4gICAgICAgIG1ldGFUYWdzOiBnZXRUYWdzRnJvbVByb3BzTGlzdChUQUdfTkFNRVMuTUVUQSwgW1RBR19QUk9QRVJUSUVTLk5BTUUsIFRBR19QUk9QRVJUSUVTLkNIQVJTRVQsIFRBR19QUk9QRVJUSUVTLkhUVFBFUVVJViwgVEFHX1BST1BFUlRJRVMuUFJPUEVSVFksIFRBR19QUk9QRVJUSUVTLklURU1fUFJPUF0sIHByb3BzTGlzdCksXG4gICAgICAgIG5vc2NyaXB0VGFnczogZ2V0VGFnc0Zyb21Qcm9wc0xpc3QoVEFHX05BTUVTLk5PU0NSSVBULCBbVEFHX1BST1BFUlRJRVMuSU5ORVJfSFRNTF0sIHByb3BzTGlzdCksXG4gICAgICAgIG9uQ2hhbmdlQ2xpZW50U3RhdGU6IGdldE9uQ2hhbmdlQ2xpZW50U3RhdGUocHJvcHNMaXN0KSxcbiAgICAgICAgc2NyaXB0VGFnczogZ2V0VGFnc0Zyb21Qcm9wc0xpc3QoVEFHX05BTUVTLlNDUklQVCwgW1RBR19QUk9QRVJUSUVTLlNSQywgVEFHX1BST1BFUlRJRVMuSU5ORVJfSFRNTF0sIHByb3BzTGlzdCksXG4gICAgICAgIHN0eWxlVGFnczogZ2V0VGFnc0Zyb21Qcm9wc0xpc3QoVEFHX05BTUVTLlNUWUxFLCBbVEFHX1BST1BFUlRJRVMuQ1NTX1RFWFRdLCBwcm9wc0xpc3QpLFxuICAgICAgICB0aXRsZTogZ2V0VGl0bGVGcm9tUHJvcHNMaXN0KHByb3BzTGlzdCksXG4gICAgICAgIHRpdGxlQXR0cmlidXRlczogZ2V0QXR0cmlidXRlc0Zyb21Qcm9wc0xpc3QoQVRUUklCVVRFX05BTUVTLlRJVExFLCBwcm9wc0xpc3QpXG4gICAgfTtcbn07XG5cbnZhciByYWZQb2x5ZmlsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2xvY2sgPSBEYXRlLm5vdygpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIGlmIChjdXJyZW50VGltZSAtIGNsb2NrID4gMTYpIHtcbiAgICAgICAgICAgIGNsb2NrID0gY3VycmVudFRpbWU7XG4gICAgICAgICAgICBjYWxsYmFjayhjdXJyZW50VGltZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByYWZQb2x5ZmlsbChjYWxsYmFjayk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgIH07XG59KCk7XG5cbnZhciBjYWZQb2x5ZmlsbCA9IGZ1bmN0aW9uIGNhZlBvbHlmaWxsKGlkKSB7XG4gICAgcmV0dXJuIGNsZWFyVGltZW91dChpZCk7XG59O1xuXG52YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdykgfHwgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHJhZlBvbHlmaWxsIDogZ2xvYmFsLnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCByYWZQb2x5ZmlsbDtcblxudmFyIGNhbmNlbEFuaW1hdGlvbkZyYW1lID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IGNhZlBvbHlmaWxsIDogZ2xvYmFsLmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IGNhZlBvbHlmaWxsO1xuXG52YXIgd2FybiA9IGZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgcmV0dXJuIGNvbnNvbGUgJiYgdHlwZW9mIGNvbnNvbGUud2FybiA9PT0gXCJmdW5jdGlvblwiICYmIGNvbnNvbGUud2Fybihtc2cpO1xufTtcblxudmFyIF9oZWxtZXRDYWxsYmFjayA9IG51bGw7XG5cbnZhciBoYW5kbGVDbGllbnRTdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNsaWVudFN0YXRlQ2hhbmdlKG5ld1N0YXRlKSB7XG4gICAgaWYgKF9oZWxtZXRDYWxsYmFjaykge1xuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShfaGVsbWV0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmIChuZXdTdGF0ZS5kZWZlcikge1xuICAgICAgICBfaGVsbWV0Q2FsbGJhY2sgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29tbWl0VGFnQ2hhbmdlcyhuZXdTdGF0ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9oZWxtZXRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29tbWl0VGFnQ2hhbmdlcyhuZXdTdGF0ZSk7XG4gICAgICAgIF9oZWxtZXRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxufTtcblxudmFyIGNvbW1pdFRhZ0NoYW5nZXMgPSBmdW5jdGlvbiBjb21taXRUYWdDaGFuZ2VzKG5ld1N0YXRlLCBjYikge1xuICAgIHZhciBiYXNlVGFnID0gbmV3U3RhdGUuYmFzZVRhZyxcbiAgICAgICAgYm9keUF0dHJpYnV0ZXMgPSBuZXdTdGF0ZS5ib2R5QXR0cmlidXRlcyxcbiAgICAgICAgaHRtbEF0dHJpYnV0ZXMgPSBuZXdTdGF0ZS5odG1sQXR0cmlidXRlcyxcbiAgICAgICAgbGlua1RhZ3MgPSBuZXdTdGF0ZS5saW5rVGFncyxcbiAgICAgICAgbWV0YVRhZ3MgPSBuZXdTdGF0ZS5tZXRhVGFncyxcbiAgICAgICAgbm9zY3JpcHRUYWdzID0gbmV3U3RhdGUubm9zY3JpcHRUYWdzLFxuICAgICAgICBvbkNoYW5nZUNsaWVudFN0YXRlID0gbmV3U3RhdGUub25DaGFuZ2VDbGllbnRTdGF0ZSxcbiAgICAgICAgc2NyaXB0VGFncyA9IG5ld1N0YXRlLnNjcmlwdFRhZ3MsXG4gICAgICAgIHN0eWxlVGFncyA9IG5ld1N0YXRlLnN0eWxlVGFncyxcbiAgICAgICAgdGl0bGUgPSBuZXdTdGF0ZS50aXRsZSxcbiAgICAgICAgdGl0bGVBdHRyaWJ1dGVzID0gbmV3U3RhdGUudGl0bGVBdHRyaWJ1dGVzO1xuXG4gICAgdXBkYXRlQXR0cmlidXRlcyhUQUdfTkFNRVMuQk9EWSwgYm9keUF0dHJpYnV0ZXMpO1xuICAgIHVwZGF0ZUF0dHJpYnV0ZXMoVEFHX05BTUVTLkhUTUwsIGh0bWxBdHRyaWJ1dGVzKTtcblxuICAgIHVwZGF0ZVRpdGxlKHRpdGxlLCB0aXRsZUF0dHJpYnV0ZXMpO1xuXG4gICAgdmFyIHRhZ1VwZGF0ZXMgPSB7XG4gICAgICAgIGJhc2VUYWc6IHVwZGF0ZVRhZ3MoVEFHX05BTUVTLkJBU0UsIGJhc2VUYWcpLFxuICAgICAgICBsaW5rVGFnczogdXBkYXRlVGFncyhUQUdfTkFNRVMuTElOSywgbGlua1RhZ3MpLFxuICAgICAgICBtZXRhVGFnczogdXBkYXRlVGFncyhUQUdfTkFNRVMuTUVUQSwgbWV0YVRhZ3MpLFxuICAgICAgICBub3NjcmlwdFRhZ3M6IHVwZGF0ZVRhZ3MoVEFHX05BTUVTLk5PU0NSSVBULCBub3NjcmlwdFRhZ3MpLFxuICAgICAgICBzY3JpcHRUYWdzOiB1cGRhdGVUYWdzKFRBR19OQU1FUy5TQ1JJUFQsIHNjcmlwdFRhZ3MpLFxuICAgICAgICBzdHlsZVRhZ3M6IHVwZGF0ZVRhZ3MoVEFHX05BTUVTLlNUWUxFLCBzdHlsZVRhZ3MpXG4gICAgfTtcblxuICAgIHZhciBhZGRlZFRhZ3MgPSB7fTtcbiAgICB2YXIgcmVtb3ZlZFRhZ3MgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKHRhZ1VwZGF0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHRhZ1R5cGUpIHtcbiAgICAgICAgdmFyIF90YWdVcGRhdGVzJHRhZ1R5cGUgPSB0YWdVcGRhdGVzW3RhZ1R5cGVdLFxuICAgICAgICAgICAgbmV3VGFncyA9IF90YWdVcGRhdGVzJHRhZ1R5cGUubmV3VGFncyxcbiAgICAgICAgICAgIG9sZFRhZ3MgPSBfdGFnVXBkYXRlcyR0YWdUeXBlLm9sZFRhZ3M7XG5cblxuICAgICAgICBpZiAobmV3VGFncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFkZGVkVGFnc1t0YWdUeXBlXSA9IG5ld1RhZ3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9sZFRhZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZW1vdmVkVGFnc1t0YWdUeXBlXSA9IHRhZ1VwZGF0ZXNbdGFnVHlwZV0ub2xkVGFncztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY2IgJiYgY2IoKTtcblxuICAgIG9uQ2hhbmdlQ2xpZW50U3RhdGUobmV3U3RhdGUsIGFkZGVkVGFncywgcmVtb3ZlZFRhZ3MpO1xufTtcblxudmFyIGZsYXR0ZW5BcnJheSA9IGZ1bmN0aW9uIGZsYXR0ZW5BcnJheShwb3NzaWJsZUFycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocG9zc2libGVBcnJheSkgPyBwb3NzaWJsZUFycmF5LmpvaW4oXCJcIikgOiBwb3NzaWJsZUFycmF5O1xufTtcblxudmFyIHVwZGF0ZVRpdGxlID0gZnVuY3Rpb24gdXBkYXRlVGl0bGUodGl0bGUsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAodHlwZW9mIHRpdGxlICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LnRpdGxlICE9PSB0aXRsZSkge1xuICAgICAgICBkb2N1bWVudC50aXRsZSA9IGZsYXR0ZW5BcnJheSh0aXRsZSk7XG4gICAgfVxuXG4gICAgdXBkYXRlQXR0cmlidXRlcyhUQUdfTkFNRVMuVElUTEUsIGF0dHJpYnV0ZXMpO1xufTtcblxudmFyIHVwZGF0ZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiB1cGRhdGVBdHRyaWJ1dGVzKHRhZ05hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgZWxlbWVudFRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpWzBdO1xuXG4gICAgaWYgKCFlbGVtZW50VGFnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaGVsbWV0QXR0cmlidXRlU3RyaW5nID0gZWxlbWVudFRhZy5nZXRBdHRyaWJ1dGUoSEVMTUVUX0FUVFJJQlVURSk7XG4gICAgdmFyIGhlbG1ldEF0dHJpYnV0ZXMgPSBoZWxtZXRBdHRyaWJ1dGVTdHJpbmcgPyBoZWxtZXRBdHRyaWJ1dGVTdHJpbmcuc3BsaXQoXCIsXCIpIDogW107XG4gICAgdmFyIGF0dHJpYnV0ZXNUb1JlbW92ZSA9IFtdLmNvbmNhdChoZWxtZXRBdHRyaWJ1dGVzKTtcbiAgICB2YXIgYXR0cmlidXRlS2V5cyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJ1dGVLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVLZXlzW2ldO1xuICAgICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gfHwgXCJcIjtcblxuICAgICAgICBpZiAoZWxlbWVudFRhZy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGVsZW1lbnRUYWcuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhlbG1ldEF0dHJpYnV0ZXMuaW5kZXhPZihhdHRyaWJ1dGUpID09PSAtMSkge1xuICAgICAgICAgICAgaGVsbWV0QXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5kZXhUb1NhdmUgPSBhdHRyaWJ1dGVzVG9SZW1vdmUuaW5kZXhPZihhdHRyaWJ1dGUpO1xuICAgICAgICBpZiAoaW5kZXhUb1NhdmUgIT09IC0xKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzVG9SZW1vdmUuc3BsaWNlKGluZGV4VG9TYXZlLCAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gYXR0cmlidXRlc1RvUmVtb3ZlLmxlbmd0aCAtIDE7IF9pID49IDA7IF9pLS0pIHtcbiAgICAgICAgZWxlbWVudFRhZy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlc1RvUmVtb3ZlW19pXSk7XG4gICAgfVxuXG4gICAgaWYgKGhlbG1ldEF0dHJpYnV0ZXMubGVuZ3RoID09PSBhdHRyaWJ1dGVzVG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgICAgIGVsZW1lbnRUYWcucmVtb3ZlQXR0cmlidXRlKEhFTE1FVF9BVFRSSUJVVEUpO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudFRhZy5nZXRBdHRyaWJ1dGUoSEVMTUVUX0FUVFJJQlVURSkgIT09IGF0dHJpYnV0ZUtleXMuam9pbihcIixcIikpIHtcbiAgICAgICAgZWxlbWVudFRhZy5zZXRBdHRyaWJ1dGUoSEVMTUVUX0FUVFJJQlVURSwgYXR0cmlidXRlS2V5cy5qb2luKFwiLFwiKSk7XG4gICAgfVxufTtcblxudmFyIHVwZGF0ZVRhZ3MgPSBmdW5jdGlvbiB1cGRhdGVUYWdzKHR5cGUsIHRhZ3MpIHtcbiAgICB2YXIgaGVhZEVsZW1lbnQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoVEFHX05BTUVTLkhFQUQpO1xuICAgIHZhciB0YWdOb2RlcyA9IGhlYWRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodHlwZSArIFwiW1wiICsgSEVMTUVUX0FUVFJJQlVURSArIFwiXVwiKTtcbiAgICB2YXIgb2xkVGFncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRhZ05vZGVzKTtcbiAgICB2YXIgbmV3VGFncyA9IFtdO1xuICAgIHZhciBpbmRleFRvRGVsZXRlID0gdm9pZCAwO1xuXG4gICAgaWYgKHRhZ3MgJiYgdGFncy5sZW5ndGgpIHtcbiAgICAgICAgdGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgYXR0cmlidXRlIGluIHRhZykge1xuICAgICAgICAgICAgICAgIGlmICh0YWcuaGFzT3duUHJvcGVydHkoYXR0cmlidXRlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlID09PSBUQUdfUFJPUEVSVElFUy5JTk5FUl9IVE1MKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LmlubmVySFRNTCA9IHRhZy5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0cmlidXRlID09PSBUQUdfUFJPUEVSVElFUy5DU1NfVEVYVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0VsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gdGFnLmNzc1RleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGFnLmNzc1RleHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB0YWdbYXR0cmlidXRlXSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiB0YWdbYXR0cmlidXRlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShIRUxNRVRfQVRUUklCVVRFLCBcInRydWVcIik7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBhIGR1cGxpY2F0ZSB0YWcgZnJvbSBkb21UYWdzdG9SZW1vdmUsIHNvIGl0IGlzbid0IGNsZWFyZWQuXG4gICAgICAgICAgICBpZiAob2xkVGFncy5zb21lKGZ1bmN0aW9uIChleGlzdGluZ1RhZywgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpbmRleFRvRGVsZXRlID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0VsZW1lbnQuaXNFcXVhbE5vZGUoZXhpc3RpbmdUYWcpO1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICBvbGRUYWdzLnNwbGljZShpbmRleFRvRGVsZXRlLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3VGFncy5wdXNoKG5ld0VsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbGRUYWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICBuZXdUYWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICByZXR1cm4gaGVhZEVsZW1lbnQuYXBwZW5kQ2hpbGQodGFnKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG9sZFRhZ3M6IG9sZFRhZ3MsXG4gICAgICAgIG5ld1RhZ3M6IG5ld1RhZ3NcbiAgICB9O1xufTtcblxudmFyIGdlbmVyYXRlRWxlbWVudEF0dHJpYnV0ZXNBc1N0cmluZyA9IGZ1bmN0aW9uIGdlbmVyYXRlRWxlbWVudEF0dHJpYnV0ZXNBc1N0cmluZyhhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLnJlZHVjZShmdW5jdGlvbiAoc3RyLCBrZXkpIHtcbiAgICAgICAgdmFyIGF0dHIgPSB0eXBlb2YgYXR0cmlidXRlc1trZXldICE9PSBcInVuZGVmaW5lZFwiID8ga2V5ICsgXCI9XFxcIlwiICsgYXR0cmlidXRlc1trZXldICsgXCJcXFwiXCIgOiBcIlwiICsga2V5O1xuICAgICAgICByZXR1cm4gc3RyID8gc3RyICsgXCIgXCIgKyBhdHRyIDogYXR0cjtcbiAgICB9LCBcIlwiKTtcbn07XG5cbnZhciBnZW5lcmF0ZVRpdGxlQXNTdHJpbmcgPSBmdW5jdGlvbiBnZW5lcmF0ZVRpdGxlQXNTdHJpbmcodHlwZSwgdGl0bGUsIGF0dHJpYnV0ZXMsIGVuY29kZSkge1xuICAgIHZhciBhdHRyaWJ1dGVTdHJpbmcgPSBnZW5lcmF0ZUVsZW1lbnRBdHRyaWJ1dGVzQXNTdHJpbmcoYXR0cmlidXRlcyk7XG4gICAgdmFyIGZsYXR0ZW5lZFRpdGxlID0gZmxhdHRlbkFycmF5KHRpdGxlKTtcbiAgICByZXR1cm4gYXR0cmlidXRlU3RyaW5nID8gXCI8XCIgKyB0eXBlICsgXCIgXCIgKyBIRUxNRVRfQVRUUklCVVRFICsgXCI9XFxcInRydWVcXFwiIFwiICsgYXR0cmlidXRlU3RyaW5nICsgXCI+XCIgKyBlbmNvZGVTcGVjaWFsQ2hhcmFjdGVycyhmbGF0dGVuZWRUaXRsZSwgZW5jb2RlKSArIFwiPC9cIiArIHR5cGUgKyBcIj5cIiA6IFwiPFwiICsgdHlwZSArIFwiIFwiICsgSEVMTUVUX0FUVFJJQlVURSArIFwiPVxcXCJ0cnVlXFxcIj5cIiArIGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzKGZsYXR0ZW5lZFRpdGxlLCBlbmNvZGUpICsgXCI8L1wiICsgdHlwZSArIFwiPlwiO1xufTtcblxudmFyIGdlbmVyYXRlVGFnc0FzU3RyaW5nID0gZnVuY3Rpb24gZ2VuZXJhdGVUYWdzQXNTdHJpbmcodHlwZSwgdGFncywgZW5jb2RlKSB7XG4gICAgcmV0dXJuIHRhZ3MucmVkdWNlKGZ1bmN0aW9uIChzdHIsIHRhZykge1xuICAgICAgICB2YXIgYXR0cmlidXRlSHRtbCA9IE9iamVjdC5rZXlzKHRhZykuZmlsdGVyKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIHJldHVybiAhKGF0dHJpYnV0ZSA9PT0gVEFHX1BST1BFUlRJRVMuSU5ORVJfSFRNTCB8fCBhdHRyaWJ1dGUgPT09IFRBR19QUk9QRVJUSUVTLkNTU19URVhUKTtcbiAgICAgICAgfSkucmVkdWNlKGZ1bmN0aW9uIChzdHJpbmcsIGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgdmFyIGF0dHIgPSB0eXBlb2YgdGFnW2F0dHJpYnV0ZV0gPT09IFwidW5kZWZpbmVkXCIgPyBhdHRyaWJ1dGUgOiBhdHRyaWJ1dGUgKyBcIj1cXFwiXCIgKyBlbmNvZGVTcGVjaWFsQ2hhcmFjdGVycyh0YWdbYXR0cmlidXRlXSwgZW5jb2RlKSArIFwiXFxcIlwiO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZyA/IHN0cmluZyArIFwiIFwiICsgYXR0ciA6IGF0dHI7XG4gICAgICAgIH0sIFwiXCIpO1xuXG4gICAgICAgIHZhciB0YWdDb250ZW50ID0gdGFnLmlubmVySFRNTCB8fCB0YWcuY3NzVGV4dCB8fCBcIlwiO1xuXG4gICAgICAgIHZhciBpc1NlbGZDbG9zaW5nID0gU0VMRl9DTE9TSU5HX1RBR1MuaW5kZXhPZih0eXBlKSA9PT0gLTE7XG5cbiAgICAgICAgcmV0dXJuIHN0ciArIFwiPFwiICsgdHlwZSArIFwiIFwiICsgSEVMTUVUX0FUVFJJQlVURSArIFwiPVxcXCJ0cnVlXFxcIiBcIiArIGF0dHJpYnV0ZUh0bWwgKyAoaXNTZWxmQ2xvc2luZyA/IFwiLz5cIiA6IFwiPlwiICsgdGFnQ29udGVudCArIFwiPC9cIiArIHR5cGUgKyBcIj5cIik7XG4gICAgfSwgXCJcIik7XG59O1xuXG52YXIgY29udmVydEVsZW1lbnRBdHRyaWJ1dGVzdG9SZWFjdFByb3BzID0gZnVuY3Rpb24gY29udmVydEVsZW1lbnRBdHRyaWJ1dGVzdG9SZWFjdFByb3BzKGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgaW5pdFByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gICAgICAgIG9ialtSRUFDVF9UQUdfTUFQW2tleV0gfHwga2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LCBpbml0UHJvcHMpO1xufTtcblxudmFyIGNvbnZlcnRSZWFjdFByb3BzdG9IdG1sQXR0cmlidXRlcyA9IGZ1bmN0aW9uIGNvbnZlcnRSZWFjdFByb3BzdG9IdG1sQXR0cmlidXRlcyhwcm9wcykge1xuICAgIHZhciBpbml0QXR0cmlidXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgICAgICAgb2JqW0hUTUxfVEFHX01BUFtrZXldIHx8IGtleV0gPSBwcm9wc1trZXldO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sIGluaXRBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciBnZW5lcmF0ZVRpdGxlQXNSZWFjdENvbXBvbmVudCA9IGZ1bmN0aW9uIGdlbmVyYXRlVGl0bGVBc1JlYWN0Q29tcG9uZW50KHR5cGUsIHRpdGxlLCBhdHRyaWJ1dGVzKSB7XG4gICAgdmFyIF9pbml0UHJvcHM7XG5cbiAgICAvLyBhc3NpZ25pbmcgaW50byBhbiBhcnJheSB0byBkZWZpbmUgdG9TdHJpbmcgZnVuY3Rpb24gb24gaXRcbiAgICB2YXIgaW5pdFByb3BzID0gKF9pbml0UHJvcHMgPSB7XG4gICAgICAgIGtleTogdGl0bGVcbiAgICB9LCBfaW5pdFByb3BzW0hFTE1FVF9BVFRSSUJVVEVdID0gdHJ1ZSwgX2luaXRQcm9wcyk7XG4gICAgdmFyIHByb3BzID0gY29udmVydEVsZW1lbnRBdHRyaWJ1dGVzdG9SZWFjdFByb3BzKGF0dHJpYnV0ZXMsIGluaXRQcm9wcyk7XG5cbiAgICByZXR1cm4gW1JlYWN0LmNyZWF0ZUVsZW1lbnQoVEFHX05BTUVTLlRJVExFLCBwcm9wcywgdGl0bGUpXTtcbn07XG5cbnZhciBnZW5lcmF0ZVRhZ3NBc1JlYWN0Q29tcG9uZW50ID0gZnVuY3Rpb24gZ2VuZXJhdGVUYWdzQXNSZWFjdENvbXBvbmVudCh0eXBlLCB0YWdzKSB7XG4gICAgcmV0dXJuIHRhZ3MubWFwKGZ1bmN0aW9uICh0YWcsIGkpIHtcbiAgICAgICAgdmFyIF9tYXBwZWRUYWc7XG5cbiAgICAgICAgdmFyIG1hcHBlZFRhZyA9IChfbWFwcGVkVGFnID0ge1xuICAgICAgICAgICAga2V5OiBpXG4gICAgICAgIH0sIF9tYXBwZWRUYWdbSEVMTUVUX0FUVFJJQlVURV0gPSB0cnVlLCBfbWFwcGVkVGFnKTtcblxuICAgICAgICBPYmplY3Qua2V5cyh0YWcpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgdmFyIG1hcHBlZEF0dHJpYnV0ZSA9IFJFQUNUX1RBR19NQVBbYXR0cmlidXRlXSB8fCBhdHRyaWJ1dGU7XG5cbiAgICAgICAgICAgIGlmIChtYXBwZWRBdHRyaWJ1dGUgPT09IFRBR19QUk9QRVJUSUVTLklOTkVSX0hUTUwgfHwgbWFwcGVkQXR0cmlidXRlID09PSBUQUdfUFJPUEVSVElFUy5DU1NfVEVYVCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gdGFnLmlubmVySFRNTCB8fCB0YWcuY3NzVGV4dDtcbiAgICAgICAgICAgICAgICBtYXBwZWRUYWcuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPSB7IF9faHRtbDogY29udGVudCB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXBwZWRUYWdbbWFwcGVkQXR0cmlidXRlXSA9IHRhZ1thdHRyaWJ1dGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCh0eXBlLCBtYXBwZWRUYWcpO1xuICAgIH0pO1xufTtcblxudmFyIGdldE1ldGhvZHNGb3JUYWcgPSBmdW5jdGlvbiBnZXRNZXRob2RzRm9yVGFnKHR5cGUsIHRhZ3MsIGVuY29kZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFRBR19OQU1FUy5USVRMRTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9Db21wb25lbnQ6IGZ1bmN0aW9uIHRvQ29tcG9uZW50KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVUaXRsZUFzUmVhY3RDb21wb25lbnQodHlwZSwgdGFncy50aXRsZSwgdGFncy50aXRsZUF0dHJpYnV0ZXMsIGVuY29kZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZVRpdGxlQXNTdHJpbmcodHlwZSwgdGFncy50aXRsZSwgdGFncy50aXRsZUF0dHJpYnV0ZXMsIGVuY29kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBVFRSSUJVVEVfTkFNRVMuQk9EWTpcbiAgICAgICAgY2FzZSBBVFRSSUJVVEVfTkFNRVMuSFRNTDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9Db21wb25lbnQ6IGZ1bmN0aW9uIHRvQ29tcG9uZW50KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udmVydEVsZW1lbnRBdHRyaWJ1dGVzdG9SZWFjdFByb3BzKHRhZ3MpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVFbGVtZW50QXR0cmlidXRlc0FzU3RyaW5nKHRhZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvQ29tcG9uZW50OiBmdW5jdGlvbiB0b0NvbXBvbmVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlVGFnc0FzUmVhY3RDb21wb25lbnQodHlwZSwgdGFncyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZVRhZ3NBc1N0cmluZyh0eXBlLCB0YWdzLCBlbmNvZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgfVxufTtcblxudmFyIG1hcFN0YXRlT25TZXJ2ZXIgPSBmdW5jdGlvbiBtYXBTdGF0ZU9uU2VydmVyKF9yZWYpIHtcbiAgICB2YXIgYmFzZVRhZyA9IF9yZWYuYmFzZVRhZyxcbiAgICAgICAgYm9keUF0dHJpYnV0ZXMgPSBfcmVmLmJvZHlBdHRyaWJ1dGVzLFxuICAgICAgICBlbmNvZGUgPSBfcmVmLmVuY29kZSxcbiAgICAgICAgaHRtbEF0dHJpYnV0ZXMgPSBfcmVmLmh0bWxBdHRyaWJ1dGVzLFxuICAgICAgICBsaW5rVGFncyA9IF9yZWYubGlua1RhZ3MsXG4gICAgICAgIG1ldGFUYWdzID0gX3JlZi5tZXRhVGFncyxcbiAgICAgICAgbm9zY3JpcHRUYWdzID0gX3JlZi5ub3NjcmlwdFRhZ3MsXG4gICAgICAgIHNjcmlwdFRhZ3MgPSBfcmVmLnNjcmlwdFRhZ3MsXG4gICAgICAgIHN0eWxlVGFncyA9IF9yZWYuc3R5bGVUYWdzLFxuICAgICAgICBfcmVmJHRpdGxlID0gX3JlZi50aXRsZSxcbiAgICAgICAgdGl0bGUgPSBfcmVmJHRpdGxlID09PSB1bmRlZmluZWQgPyBcIlwiIDogX3JlZiR0aXRsZSxcbiAgICAgICAgdGl0bGVBdHRyaWJ1dGVzID0gX3JlZi50aXRsZUF0dHJpYnV0ZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZTogZ2V0TWV0aG9kc0ZvclRhZyhUQUdfTkFNRVMuQkFTRSwgYmFzZVRhZywgZW5jb2RlKSxcbiAgICAgICAgYm9keUF0dHJpYnV0ZXM6IGdldE1ldGhvZHNGb3JUYWcoQVRUUklCVVRFX05BTUVTLkJPRFksIGJvZHlBdHRyaWJ1dGVzLCBlbmNvZGUpLFxuICAgICAgICBodG1sQXR0cmlidXRlczogZ2V0TWV0aG9kc0ZvclRhZyhBVFRSSUJVVEVfTkFNRVMuSFRNTCwgaHRtbEF0dHJpYnV0ZXMsIGVuY29kZSksXG4gICAgICAgIGxpbms6IGdldE1ldGhvZHNGb3JUYWcoVEFHX05BTUVTLkxJTkssIGxpbmtUYWdzLCBlbmNvZGUpLFxuICAgICAgICBtZXRhOiBnZXRNZXRob2RzRm9yVGFnKFRBR19OQU1FUy5NRVRBLCBtZXRhVGFncywgZW5jb2RlKSxcbiAgICAgICAgbm9zY3JpcHQ6IGdldE1ldGhvZHNGb3JUYWcoVEFHX05BTUVTLk5PU0NSSVBULCBub3NjcmlwdFRhZ3MsIGVuY29kZSksXG4gICAgICAgIHNjcmlwdDogZ2V0TWV0aG9kc0ZvclRhZyhUQUdfTkFNRVMuU0NSSVBULCBzY3JpcHRUYWdzLCBlbmNvZGUpLFxuICAgICAgICBzdHlsZTogZ2V0TWV0aG9kc0ZvclRhZyhUQUdfTkFNRVMuU1RZTEUsIHN0eWxlVGFncywgZW5jb2RlKSxcbiAgICAgICAgdGl0bGU6IGdldE1ldGhvZHNGb3JUYWcoVEFHX05BTUVTLlRJVExFLCB7IHRpdGxlOiB0aXRsZSwgdGl0bGVBdHRyaWJ1dGVzOiB0aXRsZUF0dHJpYnV0ZXMgfSwgZW5jb2RlKVxuICAgIH07XG59O1xuXG52YXIgSGVsbWV0ID0gZnVuY3Rpb24gSGVsbWV0KENvbXBvbmVudCkge1xuICAgIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gICAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICAgICAgaW5oZXJpdHMoSGVsbWV0V3JhcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICAgICAgZnVuY3Rpb24gSGVsbWV0V3JhcHBlcigpIHtcbiAgICAgICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEhlbG1ldFdyYXBwZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEhlbG1ldFdyYXBwZXIucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiAhaXNFcXVhbCh0aGlzLnByb3BzLCBuZXh0UHJvcHMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEhlbG1ldFdyYXBwZXIucHJvdG90eXBlLm1hcE5lc3RlZENoaWxkcmVuVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcE5lc3RlZENoaWxkcmVuVG9Qcm9wcyhjaGlsZCwgbmVzdGVkQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmICghbmVzdGVkQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoIChjaGlsZC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuU0NSSVBUOlxuICAgICAgICAgICAgICAgIGNhc2UgVEFHX05BTUVTLk5PU0NSSVBUOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJIVE1MOiBuZXN0ZWRDaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuU1RZTEU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0OiBuZXN0ZWRDaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCI8XCIgKyBjaGlsZC50eXBlICsgXCIgLz4gZWxlbWVudHMgYXJlIHNlbGYtY2xvc2luZyBhbmQgY2FuIG5vdCBjb250YWluIGNoaWxkcmVuLiBSZWZlciB0byBvdXIgQVBJIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICBIZWxtZXRXcmFwcGVyLnByb3RvdHlwZS5mbGF0dGVuQXJyYXlUeXBlQ2hpbGRyZW4gPSBmdW5jdGlvbiBmbGF0dGVuQXJyYXlUeXBlQ2hpbGRyZW4oX3JlZikge1xuICAgICAgICAgICAgdmFyIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcztcblxuICAgICAgICAgICAgdmFyIGNoaWxkID0gX3JlZi5jaGlsZCxcbiAgICAgICAgICAgICAgICBhcnJheVR5cGVDaGlsZHJlbiA9IF9yZWYuYXJyYXlUeXBlQ2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRQcm9wcyA9IF9yZWYubmV3Q2hpbGRQcm9wcyxcbiAgICAgICAgICAgICAgICBuZXN0ZWRDaGlsZHJlbiA9IF9yZWYubmVzdGVkQ2hpbGRyZW47XG5cbiAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXJyYXlUeXBlQ2hpbGRyZW4sIChfYmFiZWxIZWxwZXJzJGV4dGVuZHMgPSB7fSwgX2JhYmVsSGVscGVycyRleHRlbmRzW2NoaWxkLnR5cGVdID0gW10uY29uY2F0KGFycmF5VHlwZUNoaWxkcmVuW2NoaWxkLnR5cGVdIHx8IFtdLCBbX2V4dGVuZHMoe30sIG5ld0NoaWxkUHJvcHMsIHRoaXMubWFwTmVzdGVkQ2hpbGRyZW5Ub1Byb3BzKGNoaWxkLCBuZXN0ZWRDaGlsZHJlbikpXSksIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcykpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEhlbG1ldFdyYXBwZXIucHJvdG90eXBlLm1hcE9iamVjdFR5cGVDaGlsZHJlbiA9IGZ1bmN0aW9uIG1hcE9iamVjdFR5cGVDaGlsZHJlbihfcmVmMikge1xuICAgICAgICAgICAgdmFyIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczIsIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczM7XG5cbiAgICAgICAgICAgIHZhciBjaGlsZCA9IF9yZWYyLmNoaWxkLFxuICAgICAgICAgICAgICAgIG5ld1Byb3BzID0gX3JlZjIubmV3UHJvcHMsXG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRQcm9wcyA9IF9yZWYyLm5ld0NoaWxkUHJvcHMsXG4gICAgICAgICAgICAgICAgbmVzdGVkQ2hpbGRyZW4gPSBfcmVmMi5uZXN0ZWRDaGlsZHJlbjtcblxuICAgICAgICAgICAgc3dpdGNoIChjaGlsZC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuVElUTEU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgbmV3UHJvcHMsIChfYmFiZWxIZWxwZXJzJGV4dGVuZHMyID0ge30sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczJbY2hpbGQudHlwZV0gPSBuZXN0ZWRDaGlsZHJlbiwgX2JhYmVsSGVscGVycyRleHRlbmRzMi50aXRsZUF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgbmV3Q2hpbGRQcm9wcyksIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczIpKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgVEFHX05BTUVTLkJPRFk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgbmV3UHJvcHMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlBdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgbmV3Q2hpbGRQcm9wcylcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFRBR19OQU1FUy5IVE1MOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIG5ld1Byb3BzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sQXR0cmlidXRlczogX2V4dGVuZHMoe30sIG5ld0NoaWxkUHJvcHMpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIG5ld1Byb3BzLCAoX2JhYmVsSGVscGVycyRleHRlbmRzMyA9IHt9LCBfYmFiZWxIZWxwZXJzJGV4dGVuZHMzW2NoaWxkLnR5cGVdID0gX2V4dGVuZHMoe30sIG5ld0NoaWxkUHJvcHMpLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHMzKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgSGVsbWV0V3JhcHBlci5wcm90b3R5cGUubWFwQXJyYXlUeXBlQ2hpbGRyZW5Ub1Byb3BzID0gZnVuY3Rpb24gbWFwQXJyYXlUeXBlQ2hpbGRyZW5Ub1Byb3BzKGFycmF5VHlwZUNoaWxkcmVuLCBuZXdQcm9wcykge1xuICAgICAgICAgICAgdmFyIG5ld0ZsYXR0ZW5lZFByb3BzID0gX2V4dGVuZHMoe30sIG5ld1Byb3BzKTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMoYXJyYXlUeXBlQ2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGFycmF5Q2hpbGROYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczQ7XG5cbiAgICAgICAgICAgICAgICBuZXdGbGF0dGVuZWRQcm9wcyA9IF9leHRlbmRzKHt9LCBuZXdGbGF0dGVuZWRQcm9wcywgKF9iYWJlbEhlbHBlcnMkZXh0ZW5kczQgPSB7fSwgX2JhYmVsSGVscGVycyRleHRlbmRzNFthcnJheUNoaWxkTmFtZV0gPSBhcnJheVR5cGVDaGlsZHJlblthcnJheUNoaWxkTmFtZV0sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczQpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3RmxhdHRlbmVkUHJvcHM7XG4gICAgICAgIH07XG5cbiAgICAgICAgSGVsbWV0V3JhcHBlci5wcm90b3R5cGUud2Fybk9uSW52YWxpZENoaWxkcmVuID0gZnVuY3Rpb24gd2Fybk9uSW52YWxpZENoaWxkcmVuKGNoaWxkLCBuZXN0ZWRDaGlsZHJlbikge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGlmICghVkFMSURfVEFHX05BTUVTLnNvbWUoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkLnR5cGUgPT09IG5hbWU7XG4gICAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZC50eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3YXJuKFwiWW91IG1heSBiZSBhdHRlbXB0aW5nIHRvIG5lc3QgPEhlbG1ldD4gY29tcG9uZW50cyB3aXRoaW4gZWFjaCBvdGhlciwgd2hpY2ggaXMgbm90IGFsbG93ZWQuIFJlZmVyIHRvIG91ciBBUEkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdhcm4oXCJPbmx5IGVsZW1lbnRzIHR5cGVzIFwiICsgVkFMSURfVEFHX05BTUVTLmpvaW4oXCIsIFwiKSArIFwiIGFyZSBhbGxvd2VkLiBIZWxtZXQgZG9lcyBub3Qgc3VwcG9ydCByZW5kZXJpbmcgPFwiICsgY2hpbGQudHlwZSArIFwiPiBlbGVtZW50cy4gUmVmZXIgdG8gb3VyIEFQSSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG5lc3RlZENoaWxkcmVuICYmIHR5cGVvZiBuZXN0ZWRDaGlsZHJlbiAhPT0gXCJzdHJpbmdcIiAmJiAoIUFycmF5LmlzQXJyYXkobmVzdGVkQ2hpbGRyZW4pIHx8IG5lc3RlZENoaWxkcmVuLnNvbWUoZnVuY3Rpb24gKG5lc3RlZENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgbmVzdGVkQ2hpbGQgIT09IFwic3RyaW5nXCI7XG4gICAgICAgICAgICAgICAgfSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhlbG1ldCBleHBlY3RzIGEgc3RyaW5nIGFzIGEgY2hpbGQgb2YgPFwiICsgY2hpbGQudHlwZSArIFwiPi4gRGlkIHlvdSBmb3JnZXQgdG8gd3JhcCB5b3VyIGNoaWxkcmVuIGluIGJyYWNlcz8gKCA8XCIgKyBjaGlsZC50eXBlICsgXCI+e2BgfTwvXCIgKyBjaGlsZC50eXBlICsgXCI+ICkgUmVmZXIgdG8gb3VyIEFQSSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICBIZWxtZXRXcmFwcGVyLnByb3RvdHlwZS5tYXBDaGlsZHJlblRvUHJvcHMgPSBmdW5jdGlvbiBtYXBDaGlsZHJlblRvUHJvcHMoY2hpbGRyZW4sIG5ld1Byb3BzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGFycmF5VHlwZUNoaWxkcmVuID0ge307XG5cbiAgICAgICAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIGlmICghY2hpbGQgfHwgIWNoaWxkLnByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgX2NoaWxkJHByb3BzID0gY2hpbGQucHJvcHMsXG4gICAgICAgICAgICAgICAgICAgIG5lc3RlZENoaWxkcmVuID0gX2NoaWxkJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZFByb3BzID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX2NoaWxkJHByb3BzLCBbXCJjaGlsZHJlblwiXSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV3Q2hpbGRQcm9wcyA9IGNvbnZlcnRSZWFjdFByb3BzdG9IdG1sQXR0cmlidXRlcyhjaGlsZFByb3BzKTtcblxuICAgICAgICAgICAgICAgIF90aGlzMi53YXJuT25JbnZhbGlkQ2hpbGRyZW4oY2hpbGQsIG5lc3RlZENoaWxkcmVuKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hpbGQudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFRBR19OQU1FUy5MSU5LOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFRBR19OQU1FUy5NRVRBOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFRBR19OQU1FUy5OT1NDUklQVDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuU0NSSVBUOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFRBR19OQU1FUy5TVFlMRTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5VHlwZUNoaWxkcmVuID0gX3RoaXMyLmZsYXR0ZW5BcnJheVR5cGVDaGlsZHJlbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNoaWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5VHlwZUNoaWxkcmVuOiBhcnJheVR5cGVDaGlsZHJlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZFByb3BzOiBuZXdDaGlsZFByb3BzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RlZENoaWxkcmVuOiBuZXN0ZWRDaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UHJvcHMgPSBfdGhpczIubWFwT2JqZWN0VHlwZUNoaWxkcmVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogY2hpbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UHJvcHM6IG5ld1Byb3BzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkUHJvcHM6IG5ld0NoaWxkUHJvcHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVzdGVkQ2hpbGRyZW46IG5lc3RlZENoaWxkcmVuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBuZXdQcm9wcyA9IHRoaXMubWFwQXJyYXlUeXBlQ2hpbGRyZW5Ub1Byb3BzKGFycmF5VHlwZUNoaWxkcmVuLCBuZXdQcm9wcyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3UHJvcHM7XG4gICAgICAgIH07XG5cbiAgICAgICAgSGVsbWV0V3JhcHBlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgcHJvcHMgPSBvYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcImNoaWxkcmVuXCJdKTtcblxuICAgICAgICAgICAgdmFyIG5ld1Byb3BzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcblxuICAgICAgICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgbmV3UHJvcHMgPSB0aGlzLm1hcENoaWxkcmVuVG9Qcm9wcyhjaGlsZHJlbiwgbmV3UHJvcHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIG5ld1Byb3BzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjcmVhdGVDbGFzcyhIZWxtZXRXcmFwcGVyLCBudWxsLCBbe1xuICAgICAgICAgICAga2V5OiBcImNhblVzZURPTVwiLFxuXG5cbiAgICAgICAgICAgIC8vIENvbXBvbmVudC5wZWVrIGNvbWVzIGZyb20gcmVhY3Qtc2lkZS1lZmZlY3Q6XG4gICAgICAgICAgICAvLyBGb3IgdGVzdGluZywgeW91IG1heSB1c2UgYSBzdGF0aWMgcGVlaygpIG1ldGhvZCBhdmFpbGFibGUgb24gdGhlIHJldHVybmVkIGNvbXBvbmVudC5cbiAgICAgICAgICAgIC8vIEl0IGxldHMgeW91IGdldCB0aGUgY3VycmVudCBzdGF0ZSB3aXRob3V0IHJlc2V0dGluZyB0aGUgbW91bnRlZCBpbnN0YW5jZSBzdGFjay5cbiAgICAgICAgICAgIC8vIERvbuKAmXQgdXNlIGl0IGZvciBhbnl0aGluZyBvdGhlciB0aGFuIHRlc3RpbmcuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGJhc2U6IHtcInRhcmdldFwiOiBcIl9ibGFua1wiLCBcImhyZWZcIjogXCJodHRwOi8vbXlzaXRlLmNvbS9cIn1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBib2R5QXR0cmlidXRlczoge1wiY2xhc3NOYW1lXCI6IFwicm9vdFwifVxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRlZmF1bHRUaXRsZTogXCJEZWZhdWx0IFRpdGxlXCJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZGVmZXI6IHRydWVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5jb2RlU3BlY2lhbENoYXJhY3RlcnM6IHRydWVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBodG1sQXR0cmlidXRlczoge1wibGFuZ1wiOiBcImVuXCIsIFwiYW1wXCI6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGxpbms6IFt7XCJyZWxcIjogXCJjYW5vbmljYWxcIiwgXCJocmVmXCI6IFwiaHR0cDovL215c2l0ZS5jb20vZXhhbXBsZVwifV1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IG1ldGE6IFt7XCJuYW1lXCI6IFwiZGVzY3JpcHRpb25cIiwgXCJjb250ZW50XCI6IFwiVGVzdCBkZXNjcmlwdGlvblwifV1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IG5vc2NyaXB0OiBbe1wiaW5uZXJIVE1MXCI6IFwiPGltZyBzcmM9J2h0dHA6Ly9teXNpdGUuY29tL2pzL3Rlc3QuanMnXCJ9XVxuICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb25DaGFuZ2VDbGllbnRTdGF0ZTogXCIobmV3U3RhdGUpID0+IGNvbnNvbGUubG9nKG5ld1N0YXRlKVwiXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBzY3JpcHQ6IFt7XCJ0eXBlXCI6IFwidGV4dC9qYXZhc2NyaXB0XCIsIFwic3JjXCI6IFwiaHR0cDovL215c2l0ZS5jb20vanMvdGVzdC5qc1wifV1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHN0eWxlOiBbe1widHlwZVwiOiBcInRleHQvY3NzXCIsIFwiY3NzVGV4dFwiOiBcImRpdiB7IGRpc3BsYXk6IGJsb2NrOyBjb2xvcjogYmx1ZTsgfVwifV1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aXRsZTogXCJUaXRsZVwiXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdGl0bGVBdHRyaWJ1dGVzOiB7XCJpdGVtcHJvcFwiOiBcIm5hbWVcIn1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aXRsZVRlbXBsYXRlOiBcIk15U2l0ZS5jb20gLSAlc1wiXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0JCQxKGNhblVzZURPTSkge1xuICAgICAgICAgICAgICAgIENvbXBvbmVudC5jYW5Vc2VET00gPSBjYW5Vc2VET007XG4gICAgICAgICAgICB9XG4gICAgICAgIH1dKTtcbiAgICAgICAgcmV0dXJuIEhlbG1ldFdyYXBwZXI7XG4gICAgfShSZWFjdC5Db21wb25lbnQpLCBfY2xhc3MucHJvcFR5cGVzID0ge1xuICAgICAgICBiYXNlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgICBib2R5QXR0cmlidXRlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5ub2RlKSwgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICAgICAgZGVmYXVsdFRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBkZWZlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgaHRtbEF0dHJpYnV0ZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICAgIGxpbms6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLFxuICAgICAgICBtZXRhOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcbiAgICAgICAgbm9zY3JpcHQ6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLFxuICAgICAgICBvbkNoYW5nZUNsaWVudFN0YXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgc2NyaXB0OiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcbiAgICAgICAgc3R5bGU6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLFxuICAgICAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgdGl0bGVBdHRyaWJ1dGVzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgICB0aXRsZVRlbXBsYXRlOiBQcm9wVHlwZXMuc3RyaW5nXG4gICAgfSwgX2NsYXNzLmRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgZGVmZXI6IHRydWUsXG4gICAgICAgIGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzOiB0cnVlXG4gICAgfSwgX2NsYXNzLnBlZWsgPSBDb21wb25lbnQucGVlaywgX2NsYXNzLnJld2luZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1hcHBlZFN0YXRlID0gQ29tcG9uZW50LnJld2luZCgpO1xuICAgICAgICBpZiAoIW1hcHBlZFN0YXRlKSB7XG4gICAgICAgICAgICAvLyBwcm92aWRlIGZhbGxiYWNrIGlmIG1hcHBlZFN0YXRlIGlzIHVuZGVmaW5lZFxuICAgICAgICAgICAgbWFwcGVkU3RhdGUgPSBtYXBTdGF0ZU9uU2VydmVyKHtcbiAgICAgICAgICAgICAgICBiYXNlVGFnOiBbXSxcbiAgICAgICAgICAgICAgICBib2R5QXR0cmlidXRlczoge30sXG4gICAgICAgICAgICAgICAgZW5jb2RlU3BlY2lhbENoYXJhY3RlcnM6IHRydWUsXG4gICAgICAgICAgICAgICAgaHRtbEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICAgICAgICAgIGxpbmtUYWdzOiBbXSxcbiAgICAgICAgICAgICAgICBtZXRhVGFnczogW10sXG4gICAgICAgICAgICAgICAgbm9zY3JpcHRUYWdzOiBbXSxcbiAgICAgICAgICAgICAgICBzY3JpcHRUYWdzOiBbXSxcbiAgICAgICAgICAgICAgICBzdHlsZVRhZ3M6IFtdLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlwiLFxuICAgICAgICAgICAgICAgIHRpdGxlQXR0cmlidXRlczoge31cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcHBlZFN0YXRlO1xuICAgIH0sIF90ZW1wO1xufTtcblxudmFyIE51bGxDb21wb25lbnQgPSBmdW5jdGlvbiBOdWxsQ29tcG9uZW50KCkge1xuICAgIHJldHVybiBudWxsO1xufTtcblxudmFyIEhlbG1ldFNpZGVFZmZlY3RzID0gd2l0aFNpZGVFZmZlY3QocmVkdWNlUHJvcHNUb1N0YXRlLCBoYW5kbGVDbGllbnRTdGF0ZUNoYW5nZSwgbWFwU3RhdGVPblNlcnZlcikoTnVsbENvbXBvbmVudCk7XG5cbnZhciBIZWxtZXRFeHBvcnQgPSBIZWxtZXQoSGVsbWV0U2lkZUVmZmVjdHMpO1xuSGVsbWV0RXhwb3J0LnJlbmRlclN0YXRpYyA9IEhlbG1ldEV4cG9ydC5yZXdpbmQ7XG5cbmV4cG9ydCBkZWZhdWx0IEhlbG1ldEV4cG9ydDtcbmV4cG9ydCB7IEhlbG1ldEV4cG9ydCBhcyBIZWxtZXQgfTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCcm93c2VyUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciByZXNvbHZlVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcbnZhciBub3JtYWxpemVUb0xvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcblxudmFyIGZvcndhcmRSZWZTaGltID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxudmFyIExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIG5hdmlnYXRlID0gX3JlZi5uYXZpZ2F0ZSxcbiAgICAgIF9vbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImlubmVyUmVmXCIsIFwibmF2aWdhdGVcIiwgXCJvbkNsaWNrXCJdKTtcblxuICB2YXIgdGFyZ2V0ID0gcmVzdC50YXJnZXQ7XG5cbiAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX29uQ2xpY2spIF9vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRocm93IGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICB9IGVsc2Uge1xuICAgIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9cblxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgcHJvcHMpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYyJGNvbXBvbmVudCA9IF9yZWYyLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9yZWYyJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gTGlua0FuY2hvciA6IF9yZWYyJGNvbXBvbmVudCxcbiAgICAgIHJlcGxhY2UgPSBfcmVmMi5yZXBsYWNlLFxuICAgICAgdG8gPSBfcmVmMi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZjIuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNvbXBvbmVudFwiLCBcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKSwgY29udGV4dC5sb2NhdGlvbik7XG4gICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYXZpZ2F0ZTogZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICAgICAgdmFyIGlzRHVwbGljYXRlTmF2aWdhdGlvbiA9IGNyZWF0ZVBhdGgoY29udGV4dC5sb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgobm9ybWFsaXplVG9Mb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgICB2YXIgbWV0aG9kID0gcmVwbGFjZSB8fCBpc0R1cGxpY2F0ZU5hdmlnYXRpb24gPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmUsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzZW5zaXRpdmVcIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvblByb3AgfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksIGN1cnJlbnRMb2NhdGlvbik7XG4gICAgdmFyIHBhdGggPSB0b0xvY2F0aW9uLnBhdGhuYW1lOyAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuXG4gICAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcbiAgICB2YXIgbWF0Y2ggPSBlc2NhcGVkUGF0aCA/IG1hdGNoUGF0aChjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIHtcbiAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgZXhhY3Q6IGV4YWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmUsXG4gICAgICBzdHJpY3Q6IHN0cmljdFxuICAgIH0pIDogbnVsbDtcbiAgICB2YXIgaXNBY3RpdmUgPSAhIShpc0FjdGl2ZVByb3AgPyBpc0FjdGl2ZVByb3AobWF0Y2gsIGN1cnJlbnRMb2NhdGlvbikgOiBtYXRjaCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBjbGFzc05hbWVQcm9wKGlzQWN0aXZlKSA6IGNsYXNzTmFtZVByb3A7XG4gICAgdmFyIHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKGlzQWN0aXZlKSA6IHN0eWxlUHJvcDtcblxuICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgY2xhc3NOYW1lID0gam9pbkNsYXNzbmFtZXMoY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWUpO1xuICAgICAgc3R5bGUgPSBfZXh0ZW5kcyh7fSwgc3R5bGUsIGFjdGl2ZVN0eWxlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xuICB2YXIgYXJpYUN1cnJlbnRUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFtcInBhZ2VcIiwgXCJzdGVwXCIsIFwibG9jYXRpb25cIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcInRydWVcIiwgXCJmYWxzZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSksXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSlcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fTtcblxuZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7XG4gIHZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuICByZXR1cm4gY29tbW9uanNHbG9iYWxba2V5XSA9IChjb21tb25qc0dsb2JhbFtrZXldIHx8IDApICsgMTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ2V0VW5pcXVlSWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgaGlzdG9yeUNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyLUhpc3RvcnlcIik7XG5cbnZhciBjb250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlclwiKTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIFJvdXRlci5jb21wdXRlUm9vdE1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBSb3V0ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5oaXN0b3J5LmxvY2F0aW9uXG4gICAgfTsgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cblxuICAgIF90aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuc3RhdGljQ29udGV4dCkge1xuICAgICAgX3RoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVubGlzdGVuKSB7XG4gICAgICB0aGlzLnVubGlzdGVuKCk7XG4gICAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoaGlzdG9yeUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5oaXN0b3J5XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgTGlmZWN5Y2xlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpZmVjeWNsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlmZWN5Y2xlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaWZlY3ljbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91bnQpIHRoaXMucHJvcHMub25Nb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVW5tb3VudCkgdGhpcy5wcm9wcy5vblVubW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBMaWZlY3ljbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9cblxuZnVuY3Rpb24gUHJvbXB0KF9yZWYpIHtcbiAgdmFyIG1lc3NhZ2UgPSBfcmVmLm1lc3NhZ2UsXG4gICAgICBfcmVmJHdoZW4gPSBfcmVmLndoZW4sXG4gICAgICB3aGVuID0gX3JlZiR3aGVuID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiR3aGVuO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IGNvbnRleHQuc3RhdGljQ29udGV4dDtcbiAgICB2YXIgbWV0aG9kID0gcHVzaCA/IGhpc3RvcnkucHVzaCA6IGhpc3RvcnkucmVwbGFjZTtcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjb21wdXRlZE1hdGNoID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcykgOiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgIH0pIDogdG8pOyAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgIC8vIHNldCB0aGUgbmV3IGxvY2F0aW9uIGltbWVkaWF0ZWx5LlxuXG4gICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JDEpIHtcbiAgICAgICFjb250ZXh0JDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBtYXRjaCA9IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggPyBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgOiBfdGhpcy5wcm9wcy5wYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfdGhpcy5wcm9wcykgOiBjb250ZXh0JDEubWF0Y2g7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBjb250ZXh0JDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSB7XG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiByZW5kZXIgPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGUucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gJiYgIWlzVmFsaWRFbGVtZW50VHlwZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50XCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLmNvbXBvbmVudCksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxuXG52YXIgU3RhdGljUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdGF0aWNSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wcyRjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkY29udGV4dDtcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMiRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzMiRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRjb250ZXh0LFxuICAgICAgICBfdGhpcyRwcm9wczIkbG9jYXRpb24gPSBfdGhpcyRwcm9wczIubG9jYXRpb24sXG4gICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyJGxvY2F0aW9uID09PSB2b2lkIDAgPyBcIi9cIiA6IF90aGlzJHByb3BzMiRsb2NhdGlvbixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaGlzdG9yeTogaGlzdG9yeSxcbiAgICAgIHN0YXRpY0NvbnRleHQ6IGNvbnRleHRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTd2l0Y2gucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgIHZhciBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgfSkpIDogY29udGV4dC5tYXRjaDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBjb21wdXRlZE1hdGNoOiBtYXRjaFxuICAgICAgfSkgOiBudWxsO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cblxuZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcblxuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCBjb250ZXh0LCB7XG4gICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBDLnByb3BUeXBlcyA9IHtcbiAgICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufVxuXG52YXIgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5mdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlSGlzdG9yeSgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGhpc3RvcnlDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHBhdGgpIDogbWF0Y2g7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGhpc3RvcnlDb250ZXh0IGFzIF9fSGlzdG9yeUNvbnRleHQsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0LCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLmpzLm1hcFxuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgUmVhY3RfX2RlZmF1bHQgPSBfaW50ZXJvcERlZmF1bHQoUmVhY3QpO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIHdpdGhTaWRlRWZmZWN0KHJlZHVjZVByb3BzVG9TdGF0ZSwgaGFuZGxlU3RhdGVDaGFuZ2VPbkNsaWVudCwgbWFwU3RhdGVPblNlcnZlcikge1xuICBpZiAodHlwZW9mIHJlZHVjZVByb3BzVG9TdGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgcmVkdWNlUHJvcHNUb1N0YXRlIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIGhhbmRsZVN0YXRlQ2hhbmdlT25DbGllbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGhhbmRsZVN0YXRlQ2hhbmdlT25DbGllbnQgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgbWFwU3RhdGVPblNlcnZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1hcFN0YXRlT25TZXJ2ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIG1hcFN0YXRlT25TZXJ2ZXIgdG8gZWl0aGVyIGJlIHVuZGVmaW5lZCBvciBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIHJldHVybiBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpZiAodHlwZW9mIFdyYXBwZWRDb21wb25lbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgV3JhcHBlZENvbXBvbmVudCB0byBiZSBhIFJlYWN0IGNvbXBvbmVudC4nKTtcbiAgICB9XG5cbiAgICB2YXIgbW91bnRlZEluc3RhbmNlcyA9IFtdO1xuICAgIHZhciBzdGF0ZTtcblxuICAgIGZ1bmN0aW9uIGVtaXRDaGFuZ2UoKSB7XG4gICAgICBzdGF0ZSA9IHJlZHVjZVByb3BzVG9TdGF0ZShtb3VudGVkSW5zdGFuY2VzLm1hcChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnByb3BzO1xuICAgICAgfSkpO1xuXG4gICAgICBpZiAoU2lkZUVmZmVjdC5jYW5Vc2VET00pIHtcbiAgICAgICAgaGFuZGxlU3RhdGVDaGFuZ2VPbkNsaWVudChzdGF0ZSk7XG4gICAgICB9IGVsc2UgaWYgKG1hcFN0YXRlT25TZXJ2ZXIpIHtcbiAgICAgICAgc3RhdGUgPSBtYXBTdGF0ZU9uU2VydmVyKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgU2lkZUVmZmVjdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0c0xvb3NlKFNpZGVFZmZlY3QsIF9QdXJlQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gU2lkZUVmZmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIF9QdXJlQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gVHJ5IHRvIHVzZSBkaXNwbGF5TmFtZSBvZiB3cmFwcGVkIGNvbXBvbmVudFxuICAgICAgLy8gRXhwb3NlIGNhblVzZURPTSBzbyB0ZXN0cyBjYW4gbW9ua2V5cGF0Y2ggaXRcbiAgICAgIFNpZGVFZmZlY3QucGVlayA9IGZ1bmN0aW9uIHBlZWsoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIFNpZGVFZmZlY3QucmV3aW5kID0gZnVuY3Rpb24gcmV3aW5kKCkge1xuICAgICAgICBpZiAoU2lkZUVmZmVjdC5jYW5Vc2VET00pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgb25seSBjYWxsIHJld2luZCgpIG9uIHRoZSBzZXJ2ZXIuIENhbGwgcGVlaygpIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUuJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVjb3JkZWRTdGF0ZSA9IHN0YXRlO1xuICAgICAgICBzdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgbW91bnRlZEluc3RhbmNlcyA9IFtdO1xuICAgICAgICByZXR1cm4gcmVjb3JkZWRTdGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBfcHJvdG8gPSBTaWRlRWZmZWN0LnByb3RvdHlwZTtcblxuICAgICAgX3Byb3RvLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICBtb3VudGVkSW5zdGFuY2VzLnB1c2godGhpcyk7XG4gICAgICAgIGVtaXRDaGFuZ2UoKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIGVtaXRDaGFuZ2UoKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB2YXIgaW5kZXggPSBtb3VudGVkSW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG4gICAgICAgIG1vdW50ZWRJbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgZW1pdENoYW5nZSgpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFNpZGVFZmZlY3Q7XG4gICAgfShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShTaWRlRWZmZWN0LCBcImRpc3BsYXlOYW1lXCIsIFwiU2lkZUVmZmVjdChcIiArIGdldERpc3BsYXlOYW1lKFdyYXBwZWRDb21wb25lbnQpICsgXCIpXCIpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KFNpZGVFZmZlY3QsIFwiY2FuVXNlRE9NXCIsIGNhblVzZURPTSk7XG5cbiAgICByZXR1cm4gU2lkZUVmZmVjdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aXRoU2lkZUVmZmVjdDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICAgIH1cbiAgICB2YXIgcHJvdmlkZWQgPSB0eXBlb2YgbWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJyA/IG1lc3NhZ2UoKSA6IG1lc3NhZ2U7XG4gICAgdmFyIHZhbHVlID0gcHJvdmlkZWQgPyBwcmVmaXggKyBcIjogXCIgKyBwcm92aWRlZCA6IHByZWZpeDtcbiAgICB0aHJvdyBuZXcgRXJyb3IodmFsdWUpO1xufVxuXG5leHBvcnQgeyBpbnZhcmlhbnQgYXMgZGVmYXVsdCB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCIuL3R5cGVvZi5qc1wiO1xuaW1wb3J0IGFzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXlMaW1pdCBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07XG5cbiAgaWYgKF9pID09IG51bGwpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG5cbiAgdmFyIF9zLCBfZTtcblxuICB0cnkge1xuICAgIGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iXSwibmFtZXMiOlsicnVudGltZSIsImV4cG9ydHMiLCJ1bmRlZmluZWQiLCJPcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093biIsImhhc093blByb3BlcnR5IiwiJFN5bWJvbCIsIlN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZXJyIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjcmVhdGUiLCJjb250ZXh0IiwiQ29udGV4dCIsIl9pbnZva2UiLCJzdGF0ZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJtZXRob2QiLCJhcmciLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkVycm9yIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsInR5cGUiLCJkb25lIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJmbiIsImNhbGwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJ0aGlzIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3VsdCIsIl9fYXdhaXQiLCJ0aGVuIiwidW53cmFwcGVkIiwiZXJyb3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImxlbmd0aCIsImkiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwia2V5cyIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwibW9kdWxlIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJ1dGlscyIsInNldHRsZSIsImNvb2tpZXMiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImRlZmF1bHRzIiwiQ2FuY2VsIiwiY29uZmlnIiwib25DYW5jZWxlZCIsInJlcXVlc3REYXRhIiwiZGF0YSIsInJlcXVlc3RIZWFkZXJzIiwiaGVhZGVycyIsInJlc3BvbnNlVHlwZSIsImNhbmNlbFRva2VuIiwidW5zdWJzY3JpYmUiLCJzaWduYWwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNGb3JtRGF0YSIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwiYmFzZVVSTCIsInVybCIsIm9ubG9hZGVuZCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsIm9wZW4iLCJ0b1VwcGVyQ2FzZSIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJ0aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwiaW5kZXhPZiIsInNldFRpbWVvdXQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ0cmFuc2l0aW9uYWwiLCJjbGFyaWZ5VGltZW91dEVycm9yIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ4c3JmSGVhZGVyTmFtZSIsInZhbCIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsImlzVW5kZWZpbmVkIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWwiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJzZW5kIiwiYmluZCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJheGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImluc3RhbmNlIiwiZXh0ZW5kIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiVkVSU0lPTiIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwibWVzc2FnZSIsInRvU3RyaW5nIiwiX19DQU5DRUxfXyIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJwcm9taXNlIiwidG9rZW4iLCJfbGlzdGVuZXJzIiwibCIsIm9uZnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwibGlzdGVuZXIiLCJpbmRleCIsInNwbGljZSIsInNvdXJjZSIsImMiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJ2YWxpZGF0b3IiLCJ2YWxpZGF0b3JzIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJhc3NlcnRPcHRpb25zIiwic2lsZW50SlNPTlBhcnNpbmciLCJib29sZWFuIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwicnVuV2hlbiIsInN5bmNocm9ub3VzIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwiY2hhaW4iLCJBcnJheSIsImFwcGx5IiwiY29uY2F0Iiwic2hpZnQiLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJnZXRVcmkiLCJyZXBsYWNlIiwiaGFuZGxlcnMiLCJ1c2UiLCJvcHRpb25zIiwiZWplY3QiLCJpZCIsImgiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJlbmhhbmNlRXJyb3IiLCJjb2RlIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwibWVyZ2UiLCJjb21tb24iLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ0b0pTT04iLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInN0YWNrIiwiY29uZmlnMSIsImNvbmZpZzIiLCJnZXRNZXJnZWRWYWx1ZSIsInRhcmdldCIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5IiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInByb3AiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwiY29uZmlnVmFsdWUiLCJ2YWxpZGF0ZVN0YXR1cyIsImZucyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsInByb2Nlc3MiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc1N0cmVhbSIsImlzRmlsZSIsImlzQmxvYiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiYnVmZmVyIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJpc09iamVjdCIsInJhd1ZhbHVlIiwicGFyc2VyIiwiZW5jb2RlciIsImlzU3RyaW5nIiwiSlNPTiIsInBhcnNlIiwidHJpbSIsImUiLCJzdHJpbmdpZnkiLCJzdHJpbmdpZnlTYWZlbHkiLCJzdHJpY3RKU09OUGFyc2luZyIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidGhpc0FyZyIsImFyZ3MiLCJhcmd1bWVudHMiLCJlbmNvZGUiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJ2IiwiaXNEYXRlIiwidG9JU09TdHJpbmciLCJqb2luIiwiaGFzaG1hcmtJbmRleCIsInJlbGF0aXZlVVJMIiwid3JpdGUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsImlzTnVtYmVyIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwiZG9jdW1lbnQiLCJtYXRjaCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsIm5vdyIsInRlc3QiLCJwYXlsb2FkIiwib3JpZ2luVVJMIiwibXNpZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiY3JlYXRlRWxlbWVudCIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwid2luZG93IiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwibm9ybWFsaXplZE5hbWUiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInNwbGl0IiwibGluZSIsInN1YnN0ciIsImNhbGxiYWNrIiwiYXJyIiwidGhpbmciLCJkZXByZWNhdGVkV2FybmluZ3MiLCJ2ZXJzaW9uIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJvcHRzIiwiY29uc29sZSIsIndhcm4iLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJpc0Z1bmN0aW9uIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJwaXBlIiwicHJvZHVjdCIsImFzc2lnblZhbHVlIiwiYSIsImIiLCJzdHIiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJjaGFyQ29kZUF0IiwiaXNBYnNvbHV0ZSIsInNwbGljZU9uZSIsImxpc3QiLCJrIiwibiIsInZhbHVlT2YiLCJ2YWx1ZUVxdWFsIiwiZXZlcnkiLCJpdGVtIiwiYVZhbHVlIiwiYlZhbHVlIiwiYXNzaWduIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwicHJlZml4IiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwidG8iLCJmcm9tIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImxhc3QiLCJ1cCIsInBhcnQiLCJsb2NhdGlvbnNBcmVFcXVhbCIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0IiwibGlzdGVuZXJzIiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJhY3Rpb24iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImZpbHRlciIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJfa2V5IiwiY2FuVXNlRE9NIiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsIlBvcFN0YXRlRXZlbnQiLCJIYXNoQ2hhbmdlRXZlbnQiLCJnZXRIaXN0b3J5U3RhdGUiLCJoaXN0b3J5IiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJwcm9wcyIsInVhIiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl9yZWYiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwiTWF0aCIsInJhbmRvbSIsInRyYW5zaXRpb25NYW5hZ2VyIiwic2V0U3RhdGUiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImV2ZW50IiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJyZXZlcnRQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hDaGFuZ2VFdmVudCQxIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwiZ2V0SGFzaFBhdGgiLCJzdWJzdHJpbmciLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImJhc2VUYWciLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIm1pbiIsIm1heCIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwibWFwIiwibmV4dEluZGV4IiwibmV4dEVudHJpZXMiLCJjYW5HbyIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJzIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJpZ2ludCIsImJvb2wiLCJmdW5jIiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJub2RlIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImFhIiwibSIsInIiLCJ5IiwiYmEiLCJTZXQiLCJjYSIsImRhIiwiZWEiLCJhZGQiLCJmYSIsImhhIiwiaWEiLCJqYSIsImthIiwiQiIsImQiLCJmIiwiZyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsIm9hIiwicGEiLCJxYSIsIm1hIiwibmEiLCJsYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwicmEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInNhIiwidGEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiZm9yIiwiRSIsIk1hIiwiS2EiLCJMYSIsIk5hIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwic2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIlFhIiwidGFnIiwiX3JlbmRlciIsIlJhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXQiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIiRhIiwiYWIiLCJiYiIsImNiIiwib3duZXJEb2N1bWVudCIsImViIiwiY2hpbGRyZW4iLCJDaGlsZHJlbiIsImRiIiwiZmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsInBiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicmIiLCJzYiIsInRiIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsImlzIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJvbkVycm9yIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIiRiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhYyIsImNjIiwiY2hpbGQiLCJzaWJsaW5nIiwiY3VycmVudCIsImJjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJuYyIsIk1hcCIsIm9jIiwicGMiLCJxYyIsInJjIiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0Q29udGFpbmVycyIsInNjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwidGMiLCJ2YyIsIndjIiwibGFuZVByaW9yaXR5IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiY29udGFpbmVySW5mbyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJDYyIsIkRjIiwiRWMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJGYyIsIkdjIiwiSGMiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiRiIsIlJjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsInVjIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInJhbmdlIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJPZSIsImNvbnRlbnRFZGl0YWJsZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsIkciLCIkZSIsImhhcyIsImFmIiwiYmYiLCJjZiIsImRmIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJOYiIsIngiLCJ3IiwieiIsInUiLCJxIiwidCIsImVmIiwiZmYiLCJwYXJlbnRXaW5kb3ciLCJnZiIsImhmIiwiSiIsIksiLCJRIiwiTCIsImplIiwiY2hhciIsImtlIiwiamYiLCJrZiIsImxmIiwibWYiLCJhdXRvRm9jdXMiLCJuZiIsIl9faHRtbCIsIm9mIiwicGYiLCJjbGVhclRpbWVvdXQiLCJxZiIsInJmIiwic2YiLCJwcmV2aW91c1NpYmxpbmciLCJ0ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiSCIsIkkiLCJDZiIsIk0iLCJOIiwiRGYiLCJFZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkZmIiwiR2YiLCJIZiIsIklmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiSmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiUWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlJmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiU2YiLCJUZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiVWYiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlZmIiwiV2YiLCJYZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiWWYiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJPIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwiX2N1cnJlbnRWYWx1ZSIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsIkFnIiwiQmciLCJDZyIsIkEiLCJwIiwiQyIsIkRnIiwiRWciLCJGZyIsIkNvbXBvbmVudCIsInJlZnMiLCJHZyIsIktnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiSGciLCJJZyIsIkpnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkxnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJNZyIsInVwZGF0ZXIiLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiVGciLCJVZyIsIm1vZGUiLCJWZyIsImltcGxlbWVudGF0aW9uIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiZmgiLCJnaCIsImhoIiwiUCIsImloIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGVuZGluZ1Byb3BzIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJ2aCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJ3aCIsInhoIiwiUiIsIlMiLCJUIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsIkxoIiwiTWgiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJtdXRhYmxlUmVhZExhbmVzIiwiTmgiLCJVIiwidXNlU3RhdGUiLCJnZXRTbmFwc2hvdCIsInVzZUVmZmVjdCIsInNldFNuYXBzaG90IiwiT2giLCJQaCIsIlFoIiwiUmgiLCJkZXN0cm95IiwiZGVwcyIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlT3BhcXVlSWRlbnRpZmllciIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsInVmIiwiZWkiLCJSZWFjdEN1cnJlbnRPd25lciIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJxaSIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJCaSIsIkRpIiwiRWkiLCJzaSIsInJldHJ5TGFuZSIsInRpIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsInVpIiwidW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsInRhaWwiLCJ0YWlsTW9kZSIsIkFpIiwiRmkiLCJHaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsIlYiLCJIaSIsIklpIiwiVyIsIkppIiwiS2kiLCJMaSIsIk1pIiwiTmkiLCJPaSIsIldlYWtNYXAiLCJQaSIsIlFpIiwiUmkiLCJTaSIsImNvbXBvbmVudERpZENhdGNoIiwiVGkiLCJjb21wb25lbnRTdGFjayIsIlVpIiwiV2Vha1NldCIsIlZpIiwiV2kiLCJYaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiWWkiLCJaaSIsIiRpIiwiZm9jdXMiLCJhaiIsImRpc3BsYXkiLCJiaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjaiIsImRqIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaWoiLCJqaiIsImtqIiwibGoiLCJtaiIsIm5qIiwiY2VpbCIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwiV2oiLCJYaiIsInBpbmdDYWNoZSIsIllqIiwiWmoiLCJ2YSIsImFrIiwiYmsiLCJkayIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZWsiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsIm9uQ29tbWl0RmliZXJSb290IiwiZmsiLCJnayIsImlrIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImprIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImtrIiwibGsiLCJtayIsIm5rIiwicWsiLCJoeWRyYXRpb25PcHRpb25zIiwibXV0YWJsZVNvdXJjZXMiLCJfaW50ZXJuYWxSb290IiwicmsiLCJ0ayIsImhhc0F0dHJpYnV0ZSIsInNrIiwidWsiLCJoayIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIlZqIiwidmsiLCJFdmVudHMiLCJ3ayIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsImhhc0VsZW1lbnRUeXBlIiwiRWxlbWVudCIsImhhc01hcCIsImhhc1NldCIsImhhc0FycmF5QnVmZmVyIiwiZXF1YWwiLCJpdCIsImNsb2NrIiwiX2NsYXNzIiwiX3RlbXAiLCJBVFRSSUJVVEVfTkFNRVMiLCJUQUdfTkFNRVMiLCJCQVNFIiwiQk9EWSIsIkhFQUQiLCJIVE1MIiwiTElOSyIsIk1FVEEiLCJOT1NDUklQVCIsIlNDUklQVCIsIlNUWUxFIiwiVElUTEUiLCJUQUdfUFJPUEVSVElFUyIsIlJFQUNUX1RBR19NQVAiLCJhY2Nlc3NrZXkiLCJjaGFyc2V0IiwiY2xhc3MiLCJjb250ZW50ZWRpdGFibGUiLCJjb250ZXh0bWVudSIsIml0ZW1wcm9wIiwidGFiaW5kZXgiLCJIVE1MX1RBR19NQVAiLCJyZWR1Y2UiLCJTRUxGX0NMT1NJTkdfVEFHUyIsIkhFTE1FVF9BVFRSSUJVVEUiLCJfdHlwZW9mIiwiY2xhc3NDYWxsQ2hlY2siLCJDb25zdHJ1Y3RvciIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9leHRlbmRzIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJlbmNvZGVTcGVjaWFsQ2hhcmFjdGVycyIsImdldFRpdGxlRnJvbVByb3BzTGlzdCIsInByb3BzTGlzdCIsImlubmVybW9zdFRpdGxlIiwiZ2V0SW5uZXJtb3N0UHJvcGVydHkiLCJpbm5lcm1vc3RUZW1wbGF0ZSIsImlubmVybW9zdERlZmF1bHRUaXRsZSIsImdldE9uQ2hhbmdlQ2xpZW50U3RhdGUiLCJnZXRBdHRyaWJ1dGVzRnJvbVByb3BzTGlzdCIsInRhZ1R5cGUiLCJ0YWdBdHRycyIsImdldEJhc2VUYWdGcm9tUHJvcHNMaXN0IiwicHJpbWFyeUF0dHJpYnV0ZXMiLCJpbm5lcm1vc3RCYXNlVGFnIiwibG93ZXJDYXNlQXR0cmlidXRlS2V5IiwiZ2V0VGFnc0Zyb21Qcm9wc0xpc3QiLCJhcHByb3ZlZFNlZW5UYWdzIiwiYXBwcm92ZWRUYWdzIiwiaW5zdGFuY2VUYWdzIiwiaW5zdGFuY2VTZWVuVGFncyIsInByaW1hcnlBdHRyaWJ1dGVLZXkiLCJhdHRyaWJ1dGVLZXkiLCJ0YWdVbmlvbiIsInByb3BlcnR5IiwicmFmUG9seWZpbGwiLCJjdXJyZW50VGltZSIsImNhZlBvbHlmaWxsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIiwibXNnIiwiX2hlbG1ldENhbGxiYWNrIiwiY29tbWl0VGFnQ2hhbmdlcyIsIm5ld1N0YXRlIiwiYm9keUF0dHJpYnV0ZXMiLCJodG1sQXR0cmlidXRlcyIsImxpbmtUYWdzIiwibWV0YVRhZ3MiLCJub3NjcmlwdFRhZ3MiLCJvbkNoYW5nZUNsaWVudFN0YXRlIiwic2NyaXB0VGFncyIsInN0eWxlVGFncyIsInRpdGxlIiwidGl0bGVBdHRyaWJ1dGVzIiwidXBkYXRlQXR0cmlidXRlcyIsInVwZGF0ZVRpdGxlIiwidGFnVXBkYXRlcyIsInVwZGF0ZVRhZ3MiLCJhZGRlZFRhZ3MiLCJyZW1vdmVkVGFncyIsIl90YWdVcGRhdGVzJHRhZ1R5cGUiLCJuZXdUYWdzIiwib2xkVGFncyIsImZsYXR0ZW5BcnJheSIsInBvc3NpYmxlQXJyYXkiLCJhdHRyaWJ1dGVzIiwiZWxlbWVudFRhZyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaGVsbWV0QXR0cmlidXRlU3RyaW5nIiwiaGVsbWV0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXNUb1JlbW92ZSIsImF0dHJpYnV0ZUtleXMiLCJhdHRyaWJ1dGUiLCJpbmRleFRvU2F2ZSIsIl9pIiwidGFncyIsImhlYWRFbGVtZW50IiwiaGVhZCIsInRhZ05vZGVzIiwiaW5kZXhUb0RlbGV0ZSIsIm5ld0VsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsInNvbWUiLCJleGlzdGluZ1RhZyIsImlzRXF1YWxOb2RlIiwiZ2VuZXJhdGVFbGVtZW50QXR0cmlidXRlc0FzU3RyaW5nIiwiYXR0ciIsImNvbnZlcnRFbGVtZW50QXR0cmlidXRlc3RvUmVhY3RQcm9wcyIsImluaXRQcm9wcyIsImdldE1ldGhvZHNGb3JUYWciLCJ0b0NvbXBvbmVudCIsIl9pbml0UHJvcHMiLCJhdHRyaWJ1dGVTdHJpbmciLCJmbGF0dGVuZWRUaXRsZSIsImdlbmVyYXRlVGl0bGVBc1N0cmluZyIsIl9tYXBwZWRUYWciLCJtYXBwZWRUYWciLCJtYXBwZWRBdHRyaWJ1dGUiLCJnZW5lcmF0ZVRhZ3NBc1JlYWN0Q29tcG9uZW50IiwiYXR0cmlidXRlSHRtbCIsInRhZ0NvbnRlbnQiLCJpc1NlbGZDbG9zaW5nIiwiZ2VuZXJhdGVUYWdzQXNTdHJpbmciLCJtYXBTdGF0ZU9uU2VydmVyIiwiX3JlZiR0aXRsZSIsIm5vc2NyaXB0Iiwic2NyaXB0IiwiSGVsbWV0U2lkZUVmZmVjdHMiLCJkZWZlciIsIkhlbG1ldEV4cG9ydCIsIl9SZWFjdCRDb21wb25lbnQiLCJIZWxtZXRXcmFwcGVyIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiaW5oZXJpdHMiLCJuZXh0UHJvcHMiLCJtYXBOZXN0ZWRDaGlsZHJlblRvUHJvcHMiLCJuZXN0ZWRDaGlsZHJlbiIsImZsYXR0ZW5BcnJheVR5cGVDaGlsZHJlbiIsIl9iYWJlbEhlbHBlcnMkZXh0ZW5kcyIsImFycmF5VHlwZUNoaWxkcmVuIiwibmV3Q2hpbGRQcm9wcyIsIm1hcE9iamVjdFR5cGVDaGlsZHJlbiIsIl9yZWYyIiwiX2JhYmVsSGVscGVycyRleHRlbmRzMiIsIl9iYWJlbEhlbHBlcnMkZXh0ZW5kczMiLCJuZXdQcm9wcyIsIm1hcEFycmF5VHlwZUNoaWxkcmVuVG9Qcm9wcyIsIm5ld0ZsYXR0ZW5lZFByb3BzIiwiYXJyYXlDaGlsZE5hbWUiLCJfYmFiZWxIZWxwZXJzJGV4dGVuZHM0Iiwid2Fybk9uSW52YWxpZENoaWxkcmVuIiwibWFwQ2hpbGRyZW5Ub1Byb3BzIiwiX3RoaXMyIiwiX2NoaWxkJHByb3BzIiwiaW5pdEF0dHJpYnV0ZXMiLCJjb252ZXJ0UmVhY3RQcm9wc3RvSHRtbEF0dHJpYnV0ZXMiLCJkZWZhdWx0VGl0bGUiLCJ0aXRsZVRlbXBsYXRlIiwicGVlayIsInJld2luZCIsIm1hcHBlZFN0YXRlIiwicmVuZGVyU3RhdGljIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsIkJyb3dzZXJSb3V0ZXIiLCJfdGhpcyIsInJlc29sdmVUb0xvY2F0aW9uIiwibm9ybWFsaXplVG9Mb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiZm9yd2FyZFJlZiIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIkY29tcG9uZW50IiwiaXNEdXBsaWNhdGVOYXZpZ2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIk5hdkxpbmsiLCJfcmVmJGFyaWFDdXJyZW50IiwiYXJpYUN1cnJlbnQiLCJfcmVmJGFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiY2xhc3NOYW1lUHJvcCIsImNsYXNzTmFtZSIsImlzQWN0aXZlUHJvcCIsImxvY2F0aW9uUHJvcCIsInNlbnNpdGl2ZSIsInN0cmljdCIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwiY29tbW9uanNHbG9iYWwiLCJjcmVhdGVFdmVudEVtaXR0ZXIiLCJvbiIsImhhbmRsZXIiLCJvZmYiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIlByb3ZpZGVyIiwiX0NvbXBvbmVudCIsImVtaXR0ZXIiLCJfcHJvdG8iLCJvbGRWYWx1ZSIsIkNvbnN1bWVyIiwiX0NvbXBvbmVudDIiLCJvblVwZGF0ZSIsIl9wcm90bzIiLCJjcmVhdGVOYW1lZENvbnRleHQiLCJoaXN0b3J5Q29udGV4dCIsIlJvdXRlciIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJpc0V4YWN0IiwiTGlmZWN5Y2xlIiwib25Nb3VudCIsInByZXZQcm9wcyIsIm9uVW5tb3VudCIsImNhY2hlIiwiY2FjaGVDb3VudCIsImdlbmVyYXRlUGF0aCIsImNvbXBpbGVQYXRoIiwicHJldHR5IiwiUmVkaXJlY3QiLCJjb21wdXRlZE1hdGNoIiwiX3JlZiRwdXNoIiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJtYXRjaGVkIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJjb21waWxlUGF0aCQxIiwiZXhlYyIsIm1lbW8iLCJSb3V0ZSIsImNvbnRleHQkMSIsIl90aGlzJHByb3BzIiwiaXNFbXB0eUNoaWxkcmVuIiwiU3dpdGNoIiwid2l0aFJvdXRlciIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsIldyYXBwZWRDb21wb25lbnQiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwiZ3JvdXBzIiwiZGVsaW1pdGVyIiwib3B0aW9uYWwiLCJwYXJ0aWFsIiwiYXN0ZXJpc2siLCJwYXR0ZXJuIiwiYXR0YWNoS2V5cyIsInJlZ2V4cFRvUmVnZXhwIiwiYXJyYXlUb1JlZ2V4cCIsInRva2Vuc1RvUmVnRXhwIiwic3RyaW5nVG9SZWdleHAiLCJjb21waWxlIiwidG9rZW5zVG9GdW5jdGlvbiIsIlBBVEhfUkVHRVhQIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImVzY2FwZWQiLCJncm91cCIsIm1vZGlmaWVyIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJtYXRjaGVzIiwic2VnbWVudCIsImoiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiUmVhY3QiLCJSZWFjdF9fZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsInJlZHVjZVByb3BzVG9TdGF0ZSIsImhhbmRsZVN0YXRlQ2hhbmdlT25DbGllbnQiLCJtb3VudGVkSW5zdGFuY2VzIiwiZW1pdENoYW5nZSIsIlNpZGVFZmZlY3QiLCJfUHVyZUNvbXBvbmVudCIsInJlY29yZGVkU3RhdGUiLCJQdXJlQ29tcG9uZW50IiwiZ2V0RGlzcGxheU5hbWUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsInBlcmZvcm1hbmNlIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiaW52YXJpYW50IiwiY29uZGl0aW9uIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsIl9uZXh0IiwiX3Rocm93IiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJfZGVmaW5lUHJvcGVydGllcyIsIl9jcmVhdGVDbGFzcyIsIl9nZXRQcm90b3R5cGVPZiIsIm8iLCJfaW5oZXJpdHMiLCJfaW5oZXJpdHNMb29zZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfc2V0UHJvdG90eXBlT2YiLCJfYXJyYXlMaWtlVG9BcnJheSIsImxlbiIsImFycjIiLCJfc2xpY2VkVG9BcnJheSIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsIm1pbkxlbiJdLCJzb3VyY2VSb290IjoiIn0=