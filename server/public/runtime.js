(()=>{"use strict";var e,t,r,n,o,a={},i={};function u(e){var t=i[e];if(void 0!==t)return t.exports;var r=i[e]={exports:{}};return a[e](r,r.exports,u),r.exports}u.m=a,e=[],u.O=(t,r,n,o)=>{if(!r){var a=1/0;for(c=0;c<e.length;c++){for(var[r,n,o]=e[c],i=!0,l=0;l<r.length;l++)(!1&o||a>=o)&&Object.keys(u.O).every((e=>u.O[e](r[l])))?r.splice(l--,1):(i=!1,o<a&&(a=o));if(i){e.splice(c--,1);var s=n();void 0!==s&&(t=s)}}return t}o=o||0;for(var c=e.length;c>0&&e[c-1][2]>o;c--)e[c]=e[c-1];e[c]=[r,n,o]},u.F={},u.E=e=>{Object.keys(u.F).map((t=>{u.F[t](e)}))},u.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return u.d(t,{a:t}),t},u.d=(e,t)=>{for(var r in t)u.o(t,r)&&!u.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},u.f={},u.e=e=>Promise.all(Object.keys(u.f).reduce(((t,r)=>(u.f[r](e,t),t)),[])),u.u=e=>({30:"project-uk",37:"chunk-what-we-do",159:"chunk-home",176:"projects",301:"chunk-about-us",477:"contact-us",623:"project-lithuania",755:"project-france"}[e]+".js"),u.miniCssF=e=>({30:"project-uk",37:"chunk-what-we-do",159:"chunk-home",176:"projects",301:"chunk-about-us",477:"contact-us",623:"project-lithuania",755:"project-france"}[e]+".css"),u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),t={},r="tantum-pm:",u.l=(e,n,o,a)=>{if(t[e])t[e].push(n);else{var i,l;if(void 0!==o)for(var s=document.getElementsByTagName("script"),c=0;c<s.length;c++){var d=s[c];if(d.getAttribute("src")==e||d.getAttribute("data-webpack")==r+o){i=d;break}}i||(l=!0,(i=document.createElement("script")).type="module",i.charset="utf-8",i.timeout=120,u.nc&&i.setAttribute("nonce",u.nc),i.setAttribute("data-webpack",r+o),i.src=e),t[e]=[n];var p=(r,n)=>{i.onerror=i.onload=null,clearTimeout(f);var o=t[e];if(delete t[e],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(n))),r)return r(n)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),l&&document.head.appendChild(i)}},u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.p="/",n=e=>new Promise(((t,r)=>{var n=u.miniCssF(e),o=u.p+n;if(((e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(i=r[n]).getAttribute("data-href")||i.getAttribute("href");if("stylesheet"===i.rel&&(o===e||o===t))return i}var a=document.getElementsByTagName("style");for(n=0;n<a.length;n++){var i;if((o=(i=a[n]).getAttribute("data-href"))===e||o===t)return i}})(n,o))return t();((e,t,r,n)=>{var o=document.createElement("link");o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=a=>{if(o.onerror=o.onload=null,"load"===a.type)r();else{var i=a&&("load"===a.type?"missing":a.type),u=a&&a.target&&a.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+u+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=i,l.request=u,o.parentNode.removeChild(o),n(l)}},o.href=t,document.head.appendChild(o)})(e,o,t,r)})),o={666:0},u.f.miniCss=(e,t)=>{o[e]?t.push(o[e]):0!==o[e]&&{30:1,37:1,159:1,176:1,301:1,477:1,623:1,755:1}[e]&&t.push(o[e]=n(e).then((()=>{o[e]=0}),(t=>{throw delete o[e],t})))},(()=>{var e={666:0};u.f.j=(t,r)=>{var n=u.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else if(666!=t){var o=new Promise(((r,o)=>n=e[t]=[r,o]));r.push(n[2]=o);var a=u.p+u.u(t),i=new Error;u.l(a,(r=>{if(u.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var o=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.src;i.message="Loading chunk "+t+" failed.\n("+o+": "+a+")",i.name="ChunkLoadError",i.type=o,i.request=a,n[1](i)}}),"chunk-"+t,t)}else e[t]=0},u.F.j=t=>{if((!u.o(e,t)||void 0===e[t])&&666!=t){e[t]=null;var r=document.createElement("link");u.nc&&r.setAttribute("nonce",u.nc),r.rel="prefetch",r.as="script",r.href=u.p+u.u(t),document.head.appendChild(r)}},u.O.j=t=>0===e[t];var t=(t,r)=>{var n,o,[a,i,l]=r,s=0;if(a.some((t=>0!==e[t]))){for(n in i)u.o(i,n)&&(u.m[n]=i[n]);if(l)var c=l(u)}for(t&&t(r);s<a.length;s++)o=a[s],u.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return u.O(c)},r=self.webpackChunktantum_pm=self.webpackChunktantum_pm||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,